# This file is the entry point to configure your own services and load the default configuration.
# If you want to remove a service, deprecate it, or change its class, you can apply the changes here.
#
# If you are *not* using the default services.yaml file in your package, you *must* pass an
# absolute path to this file's location to the `imports` key in your package's services.yaml (e.g.
# imports: ['%kernel.project_dir%/config/services.yaml'])
#
# See https://symfony.com/doc/current/configuration.html#importing-the-routing-configuration

imports:
    - { resource: 'services_logging.yaml' }

parameters:
    app.mtf_log_level: 'info'
    # Configuration pour le backtesting avec une heure fixe
    app.clock.fixed_time: null  # null = temps réel, sinon DateTimeImmutable pour backtesting
    trading.file: '%kernel.project_dir%/config/trading.yml'
    bitmart_public_base_uri: '%env(string:BITMART_PUBLIC_API_URL)%'
    bitmart_private_base_uri: '%env(string:BITMART_PRIVATE_API_URL)%'
    
    # Configuration TradeEntry - Valeurs par défaut
    trade_entry.defaults:
        tick_size: 0.1
        zone_ttl_sec: 240
        k_low: 1.2
        k_high: 0.4
        k_stop_atr: 1.5
        tp1_r: 2.0
        tp1_size_pct: 60
        lev_min: 2.0
        lev_max: 20.0
        k_dynamic: 10.0
        rsi_cap: 70.0
        require_pullback: true
        min_volume_ratio: 1.5
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Logging/'
            - '../src/Kernel.php'
            - '../src/*/LookAtit'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones



    # MTF Services
    App\MtfValidator\Service\MtfTimeService:
        public: true

    # Services de timeframe MTF - Configuration supprimée pour utiliser l'auto-wiring

    # Configuration Redis temporaire pour résoudre le problème LockManager
    # Option 1: Redis réel (décommentez si Redis est disponible)
    # Redis:
    #     class: Redis
    #     calls:
    #         - [connect, ['127.0.0.1', 6379]]
    
    # Option 2: Mock Redis pour les tests (décommentez si Redis n'est pas disponible)
    Redis:
        class: App\Runtime\Concurrency\MockRedis
        public: true


#    App\MtfValidator\Service\MtfRunService:
#        arguments:
#            $mtfService: '@App\MtfValidator\Service\MtfService'
#            $mtfSwitchRepository: '@App\Repository\MtfSwitchRepository'
#            $mtfLockRepository: '@App\Repository\MtfLockRepository'
#            $contractRepository: '@App\Repository\ContractRepository'
#            $logger: '@monolog.logger.mtf'
#            $positionsFlowLogger: '@monolog.logger.positions_flow'
#            $clock: '@Psr\Clock\ClockInterface'
#            $tradingDecisionService: '@App\EntryPosition\Service\TradingDecisionService'
#            $tradeContext: '@App\EntryPosition\Service\TradeContextService'
#            $providerService: '@App\Provider\ProviderService'
#        public: true

    # Rate Limiter

    bitmart.throttle_lock_store:
        class: Symfony\Component\Lock\Store\FlockStore
        arguments:
            - '%kernel.project_dir%/var/lock'

    bitmart.throttle_lock_factory:
        class: Symfony\Component\Lock\LockFactory
        arguments:
            - '@bitmart.throttle_lock_store'

    # Configuration Bitmart
    App\Provider\Bitmart\Http\BitmartConfig:
        arguments:
            $apiKey: '%env(BITMART_API_KEY)%'
            $apiSecret: '%env(BITMART_SECRET_KEY)%'
            $apiMemo: '%env(BITMART_API_MEMO)%'
        public: true
    App\Config\MtfContractsConfig:
        arguments:
            $path: '%kernel.project_dir%/config/app/mtf_contracts.yaml'

    # BitMart HTTP Client
    App\Provider\Bitmart\Http\BitmartHttpClientPublic:
        arguments:
            $bitmartFuturesV2: '@http_client.bitmart_futures_v2'
            $bitmartSystem: '@http_client.bitmart_system'
            $lockFactory: '@bitmart.throttle_lock_factory'
            $projectDir: '%kernel.project_dir%'
        public: true

    App\Domain\Ports\Out\TradingProviderPort: '@App\Infrastructure\Trading\BitmartTradingProvider'

    # Kline Provider

    # MTF Controller
    App\Controller\MtfController:
        arguments:
            $mtfService: '@App\MtfValidator\Service\MtfService'
            $klineRepository: '@App\Repository\KlineRepository'
            $mtfStateRepository: '@App\Repository\MtfStateRepository'
            $mtfSwitchRepository: '@App\Repository\MtfSwitchRepository'
            $mtfAuditRepository: '@App\Repository\MtfAuditRepository'
            $mtfLockRepository: '@App\Repository\MtfLockRepository'
            $orderPlanRepository: '@App\Repository\OrderPlanRepository'
            $logger: '@logger'
            $mtfRunService: '@App\MtfValidator\Service\MtfRunService'
            $clock: '@Psr\Clock\ClockInterface'
        public: true

    # HTTP Client pour BitMart
    GuzzleHttp\Client:
        arguments:
            - timeout: 10
            - connect_timeout: 5

    # BitMart REST Client (utilise maintenant BitmartHttpClientPublic)
    # App\Infrastructure\Http\BitmartRestClient: supprimé, utilise App\Provider\Bitmart\Http\BitmartHttpClientPublic

    # WebSocket dependencies
    React\EventLoop\LoopInterface:
        class: React\EventLoop\Loop
        factory: [React\EventLoop\Loop, get]

    React\Socket\ConnectorInterface:
        class: React\Socket\Connector
        arguments:
            - loop: '@React\EventLoop\LoopInterface'

    # BitMart WebSocket Client

    # Repositories
    App\Repository\KlineRepository:
        arguments:
            $registry: '@doctrine'

    App\Repository\ContractRepository:
        arguments:
            $registry: '@doctrine'

    # Alias pour l’interface de configuration MTF -> implémentation TradingParameters
    App\Config\MtfConfigProviderInterface: '@App\Config\TradingParameters'
    App\Config\MtfValidationConfig:
        arguments:
            $path: '%kernel.project_dir%/config/app/mtf_validations.yaml'

    # Auto-tag des services de signaux par timeframe
    _instanceof:
        App\Signal\SignalServiceInterface:
            tags: ['app.signal.timeframe']

    # Registre des conditions: injection automatique via AutowireLocator/AutowireIterator
    App\Indicator\ConditionLoader\ConditionRegistry:
        arguments:
            $logger: '@logger'
        calls:
            - [ load, ['@App\Config\MtfValidationConfig'] ]
    
    # Nouveau registre des conditions avec AutowireLocator/AutowireIterator
    App\Indicator\Registry\ConditionRegistry:
        arguments:
            $logger: '@logger'
    App\Indicator\ConditionLoader\TimeframeEvaluator:
        arguments:
            $registry: '@App\Indicator\ConditionLoader\ConditionRegistry'

    # Builder de contexte pour les indicateurs
    App\Indicator\Context\IndicatorContextBuilder:
        arguments:
            $rsi: '@App\Indicator\Core\Momentum\Rsi'
            $macd: '@App\Indicator\Core\Momentum\Macd'
            $ema: '@App\Indicator\Core\Trend\Ema'
            $adx: '@App\Indicator\Core\Trend\Adx'
            $vwap: '@App\Indicator\Core\Volume\Vwap'
            $atrCalc: '@App\Indicator\Core\AtrCalculator'

    # Validation des signaux: injecter tous les services timeframe taggés
    App\Signal\SignalValidationService:
        arguments:
            $timeframeServices: !tagged_iterator 'app.signal.timeframe'
            $validationLogger: '@logger'

    # Contrôleur de test des indicateurs
    App\Controller\Web\IndicatorTestController:
        arguments:
            $indicatorMain: '@App\Contract\Indicator\IndicatorMainProviderInterface'
            $tradingConfigService: '@App\Service\TradingConfigService'
            $klineDataService: '@App\Service\KlineDataService'
        tags: ['controller.service_arguments']

    # Services pour la configuration et les données
    App\Service\TradingConfigService:
        arguments:
            $parameterBag: '@parameter_bag'

    App\Service\KlineDataService: ~



    # Config Services
    App\Config\TradingParameters:
        arguments:
            $configFile: '%trading.file%'

    # Service utilitaire pour le backtesting avec heure fixe
    App\Service\BacktestClockService:
        public: true

    App\Repository\HotKlineRepository:
        arguments:
            $registry: '@doctrine'

    # WebSocket Dispatcher Services
    App\Service\AssignmentStorageInterface: '@App\Service\CsvAssignmentStorage'

    App\Service\CsvAssignmentStorage:
        arguments:
            $filePath: '%kernel.project_dir%/var/hot_assignment.csv'

    App\Service\ContractDispatcher:
        arguments:
            $storage: '@App\Service\AssignmentStorageInterface'
            $http: '@http_client'
            $workersCsv: '%env(WS_WORKERS)%'
    # === Handler Monolog qui publie dans Messenger (Async) ===
    # On le rend public pour pouvoir le référencer depuis monolog.yaml (type: service, id: ...)
    App\Indicator\Condition\CloseMinusEma200GtCondition:
        arguments:
            $defaultThreshold: -0.0015   # comme ton YAML
            $eps: 1.0e-12
        tags: ['app.indicator.condition']

    App\Indicator\Condition\CloseMinusEma200LtCondition:
        arguments:
            $defaultThreshold: -0.0015   # ex: exiger close < ema200 de 0,15% ou plus
            $eps: 1.0e-12
        tags: ['app.indicator.condition']

    App\Indicator\Condition\Ema20MinusEma50GtCondition:
        arguments:
            $defaultThreshold: -0.0008   # comme ton YAML
            $eps: 1.0e-12
        tags: ['app.indicator.condition']

    # Formateur de logging personnalisé
    App\Logging\CustomLineFormatter:
        public: true

    # === TradeEntry Services ===
    # Les services TradeEntry sont auto-configurés via le namespace `App\` et `autoconfigure`.
    # Plus besoin de l'attribut #[AsService]; ajouter des configs spécifiques si nécessaire.
    
    # Configuration TradeEntry avec paramètres par défaut
    App\TradeEntry\PreOrder\PreOrderBuilder:
        arguments:
            $defaults: '%trade_entry.defaults%'
    
    # Logger spécifique pour TradeEntry
    monolog.logger.trade_entry:
        parent: monolog.logger
        arguments:
            - trade_entry
        tags:
            - { name: monolog.logger, channel: trade_entry }
