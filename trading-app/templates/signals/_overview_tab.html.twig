<!-- Statistiques rapides -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body text-center">
                <h5>{{ stats.total_signals ?? 0 }}</h5>
                <small>Total Signaux</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body text-center">
                <h5>{{ stats.long_signals ?? 0 }}</h5>
                <small>Signaux LONG</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body text-center">
                <h5>{{ stats.short_signals ?? 0 }}</h5>
                <small>Signaux SHORT</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body text-center">
                <h5>{{ activeContracts|length }}</h5>
                <small>Contrats Actifs</small>
            </div>
        </div>
    </div>
</div>

<!-- Contrôles du tableau -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-body py-2">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="hideEmptyTf" onchange="toggleEmptyTimeframes()">
                            <label class="form-check-label" for="hideEmptyTf">
                                Masquer les contrats sans signal (tous TF)
                            </label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="d-flex flex-wrap gap-2">
                            <small class="text-muted me-2">Masquer contrats sans signal pour:</small>
                            {% for tf in timeframes %}
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input tf-toggle" type="checkbox" id="tf-{{ tf }}" data-tf="{{ tf }}">
                                    <label class="form-check-label" for="tf-{{ tf }}">
                                        {{ tf }}
                                    </label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <small class="text-muted">
                            <span id="contractCount">{{ activeContracts|length }}</span> contrats affichés
                        </small>
                        <button class="btn btn-sm btn-outline-secondary ms-2" onclick="testTimeframeToggle()">Test</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Tableau des derniers signaux par contrat -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-table"></i> Derniers Signaux par Contrat et Timeframe
                </h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="overviewTable" class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Contrat</th>
                                {% for tf in timeframes %}
                                    <th class="text-center">{{ tf }}</th>
                                {% endfor %}
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for contract in activeContracts %}
                                {% set contractSignals = lastSignalsByContract[contract] ?? {} %}
                                <tr data-contract="{{ contract }}">
                                    <td>
                                        <strong>{{ contract }}</strong>
                                    </td>
                                    {% for tf in timeframes %}
                                        <td class="text-center {% if contractSignals[tf] is not defined %}empty-tf{% endif %}" data-tf="{{ tf }}">
                                            {% if contractSignals[tf] is defined %}
                                                {% set signal = contractSignals[tf] %}
                                                <div class="d-flex flex-column align-items-center">
                                                    {% if signal.side.value == 'LONG' %}
                                                        <span class="badge bg-success mb-1">LONG</span>
                                                    {% elseif signal.side.value == 'SHORT' %}
                                                        <span class="badge bg-danger mb-1">SHORT</span>
                                                    {% else %}
                                                        <span class="badge bg-secondary mb-1">{{ signal.side.value }}</span>
                                                    {% endif %}
                                                    
                                                    {% if signal.score %}
                                                        <small class="text-muted">{{ signal.score|number_format(2) }}</small>
                                                    {% endif %}
                                                    
                                                    <small class="text-muted">
                                                        {{ signal.klineTime|date('d/m H:i') }}
                                                    </small>
                                                </div>
                                            {% else %}
                                                <span class="text-muted">-</span>
                                            {% endif %}
                                        </td>
                                    {% endfor %}
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" onclick="viewContractChart('{{ contract }}')" title="Voir graphique">
                                                <i class="bi bi-graph-up"></i>
                                            </button>
                                            <button class="btn btn-outline-info" onclick="viewContractDetails('{{ contract }}')" title="Voir détails">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.empty-tf {
    background-color: #f8f9fa !important;
    color: #6c757d;
}

.empty-tf:hover {
    background-color: #e9ecef !important;
}

#overviewTable {
    width: 100% !important;
    table-layout: fixed;
}

#overviewTable th {
    cursor: pointer;
    user-select: none;
}

#overviewTable th:hover {
    background-color: #495057 !important;
}

#overviewTable th:first-child {
    width: 120px !important; /* Contrat column */
}

#overviewTable th:last-child {
    width: 100px !important; /* Actions column */
}

#overviewTable td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.tf-toggle {
    margin-right: 0.25rem;
}

.form-check-inline {
    margin-right: 0.5rem;
}

.form-check-inline:last-child {
    margin-right: 0;
}

.controls-section {
    background-color: #f8f9fa;
    border-radius: 0.375rem;
    padding: 0.75rem;
}
</style>

<script>
let overviewTable;

// Attendre que jQuery et DataTables soient chargés
function initializeOverviewTable() {
    if (typeof $ === 'undefined') {
        console.log('jQuery not loaded yet, retrying...');
        setTimeout(initializeOverviewTable, 100);
        return;
    }
    
    if (typeof $.fn.DataTable === 'undefined') {
        console.log('DataTables not loaded yet, retrying...');
        setTimeout(initializeOverviewTable, 100);
        return;
    }
    
    console.log('Initializing DataTable...');
    
    // Initialisation de DataTables pour le tableau d'aperçu
    overviewTable = $('#overviewTable').DataTable({
        pageLength: 25,
        order: [[0, 'asc']], // Trier par symbole
        scrollX: true,
        autoWidth: false,
        responsive: false,
        columnDefs: [
            { 
                orderable: false, 
                targets: [{{ timeframes|length + 1 }}] // Actions column
            },
            // Colonnes de timeframes avec tri personnalisé
            {% for i in range(1, timeframes|length + 1) %}
            {
                type: 'custom-tf-sort',
                targets: [{{ i }}]
            }{% if not loop.last %},{% endif %}
            {% endfor %}
        ]
    });

    // Ajouter le tri personnalisé pour les timeframes
    $.fn.dataTable.ext.type.order['custom-tf-sort-pre'] = function(data) {
        // Retourner 0 pour les cellules vides, 1 pour LONG, 2 pour SHORT, 3 pour autres
        if (data === '-' || data.trim() === '') return 0;
        if (data.includes('LONG')) return 1;
        if (data.includes('SHORT')) return 2;
        return 3;
    };

    console.log('DataTable initialized successfully');

    // Initialiser l'état des colonnes basé sur les cases à cocher
    setTimeout(() => {
        initializeColumnStates();
    }, 500);
    
    // Ajouter des événements pour les cases à cocher des timeframes
    document.querySelectorAll('.tf-toggle').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const tf = this.getAttribute('data-tf');
            console.log('Checkbox changed:', tf, this.checked);
            toggleTimeframeColumn(tf);
        });
    });
}

// Démarrer l'initialisation - utiliser window.onload pour s'assurer que tout est chargé
window.addEventListener('load', function() {
    console.log('Window loaded, starting initialization...');
    initializeOverviewTable();
});

function initializeColumnStates() {
    console.log('Initializing column states'); // Debug
    
    // Toutes les cases sont décochées par défaut, donc tous les contrats sont visibles
    console.log('All timeframe filters are unchecked by default - all contracts visible');
}

function toggleEmptyTimeframes() {
    const hideEmpty = document.getElementById('hideEmptyTf').checked;
    const rows = document.querySelectorAll('#overviewTable tbody tr[data-contract]');
    let visibleCount = 0;

    rows.forEach(row => {
        const contract = row.getAttribute('data-contract');
        
        if (hideEmpty) {
            // Vérifier les timeframes qui ne sont pas filtrés individuellement
            const activeTimeframes = [];
            document.querySelectorAll('.tf-toggle:checked').forEach(checkbox => {
                activeTimeframes.push(checkbox.getAttribute('data-tf'));
            });
            
            // Vérifier si le contrat a des signaux pour au moins un timeframe actif
            let hasSignalForActiveTf = false;
            activeTimeframes.forEach(tf => {
                const tfCell = row.querySelector(`td[data-tf="${tf}"]`);
                if (tfCell && !tfCell.classList.contains('empty-tf')) {
                    hasSignalForActiveTf = true;
                }
            });
            
            if (hasSignalForActiveTf) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        } else {
            // Afficher tous les contrats
            row.style.display = '';
            visibleCount++;
        }
    });

    // Mettre à jour le compteur
    document.getElementById('contractCount').textContent = visibleCount;
}

function toggleTimeframeColumn(tf) {
    console.log('Toggle timeframe filter for:', tf); // Debug
    
    const checkbox = document.getElementById('tf-' + tf);
    if (!checkbox) {
        console.error('Checkbox not found for timeframe:', tf);
        return;
    }
    
    const hideContractsWithoutSignal = checkbox.checked;
    console.log('Hide contracts without signal for', tf, ':', hideContractsWithoutSignal); // Debug
    
    // Filtrer les lignes de contrats
    const rows = document.querySelectorAll('#overviewTable tbody tr[data-contract]');
    let visibleCount = 0;

    rows.forEach(row => {
        const contract = row.getAttribute('data-contract');
        const tfCell = row.querySelector(`td[data-tf="${tf}"]`);
        
        if (hideContractsWithoutSignal) {
            // Masquer les contrats qui n'ont pas de signal pour ce timeframe
            if (tfCell && tfCell.classList.contains('empty-tf')) {
                row.style.display = 'none';
            } else {
                row.style.display = '';
                visibleCount++;
            }
        } else {
            // Afficher tous les contrats
            row.style.display = '';
            visibleCount++;
        }
    });

    // Mettre à jour le compteur
    document.getElementById('contractCount').textContent = visibleCount;
    console.log('Updated contract count:', visibleCount);
}

function viewContractChart(symbol) {
    // Rediriger vers les graphiques avec le symbole
    window.location.href = '{{ path('graph_index') }}?symbol=' + symbol;
}

function viewContractDetails(symbol) {
    // Basculer vers l'onglet détails avec filtre sur le symbole
    const detailsTab = document.getElementById('details-tab');
    const tab = new bootstrap.Tab(detailsTab);
    tab.show();
    
    // Appliquer le filtre sur le symbole dans l'onglet détails
    setTimeout(() => {
        const filterSymbol = document.getElementById('filterSymbol');
        if (filterSymbol) {
            filterSymbol.value = symbol;
            applyFilters();
        }
    }, 100);
}

function testTimeframeToggle() {
    console.log('=== Testing timeframe filter ===');
    console.log('jQuery available:', typeof $ !== 'undefined');
    console.log('DataTables available:', typeof $.fn.DataTable !== 'undefined');
    console.log('Overview table exists:', !!overviewTable);
    console.log('Checkboxes found:', document.querySelectorAll('.tf-toggle').length);
    
    if (!overviewTable) {
        console.error('DataTable not initialized! Trying to reinitialize...');
        initializeOverviewTable();
        return;
    }
    
    // Test avec le premier timeframe
    const firstTf = '1m';
    const checkbox = document.getElementById('tf-' + firstTf);
    if (checkbox) {
        console.log('Testing filter for timeframe:', firstTf);
        console.log('Current state:', checkbox.checked);
        
        // Tester le filtrage
        checkbox.checked = !checkbox.checked;
        console.log('New state:', checkbox.checked);
        toggleTimeframeColumn(firstTf);
        
        // Restaurer l'état
        setTimeout(() => {
            checkbox.checked = !checkbox.checked;
            toggleTimeframeColumn(firstTf);
            console.log('State restored');
        }, 2000);
    } else {
        console.error('First checkbox not found');
    }
}
</script>
