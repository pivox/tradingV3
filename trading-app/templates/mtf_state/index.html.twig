{% extends 'base.html.twig' %}

{% block title %}États MTF - Trading{% endblock %}

{% block body %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>
                <i class="bi bi-layers"></i> États MTF (Multi-Timeframe)
            </h1>
            <div>
                <div class="form-check form-switch d-inline-block me-3">
                    <input class="form-check-input" type="checkbox" id="autoRefresh" checked>
                    <label class="form-check-label" for="autoRefresh">
                        Actualisation auto (30s)
                    </label>
                </div>
                <button class="btn btn-primary" onclick="refreshTable()">
                    <i class="bi bi-arrow-clockwise"></i> Actualiser
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Filtres -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-funnel"></i> Filtres
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label for="filterSymbol" class="form-label">Symbole</label>
                        <input type="text" class="form-control" id="filterSymbol" placeholder="Ex: BTCUSDT">
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button class="btn btn-outline-secondary" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> Effacer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Statistiques -->
<div class="row mb-4">
    <div class="col-md-2">
        <div class="card bg-primary text-white">
            <div class="card-body text-center">
                <h5 id="totalStates">0</h5>
                <small>États MTF</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-success text-white">
            <div class="card-body text-center">
                <h5 id="k4hCount">0</h5>
                <small>Avec K4h</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-info text-white">
            <div class="card-body text-center">
                <h5 id="k1hCount">0</h5>
                <small>Avec K1h</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-warning text-white">
            <div class="card-body text-center">
                <h5 id="k15mCount">0</h5>
                <small>Avec K15m</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-secondary text-white">
            <div class="card-body text-center">
                <h5 id="k5mCount">0</h5>
                <small>Avec K5m</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-dark text-white">
            <div class="card-body text-center">
                <h5 id="k1mCount">0</h5>
                <small>Avec K1m</small>
            </div>
        </div>
    </div>
    <script>
    async function loadStats(){
        try {
            const resp = await fetch('{{ path('mtf_states_stats') }}');
            const s = await resp.json();
            document.getElementById('totalStates').textContent = s.total ?? 0;
            document.getElementById('k4hCount').textContent = s.k4h ?? 0;
            document.getElementById('k1hCount').textContent = s.k1h ?? 0;
            document.getElementById('k15mCount').textContent = s.k15m ?? 0;
            document.getElementById('k5mCount').textContent = s.k5m ?? 0;
            document.getElementById('k1mCount').textContent = s.k1m ?? 0;
        } catch(e) {}
    }
    </script>
</div>

<!-- Table des états MTF -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-table"></i> Liste des États MTF ({{ mtfStates|length }})
                </h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="mtfStatesTable" class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Symbole</th>
                                <th>K4h</th>
                                <th>K1h</th>
                                <th>K15m</th>
                                <th>K5m</th>
                                <th>K1m</th>
                                <th>Sides</th>
                                <th>Mis à jour</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let autoRefreshInterval;

$(document).ready(function() {
    // Charger stats
    loadStats();

    // Initialisation de DataTables en mode serveur
    $('#mtfStatesTable').DataTable({
        processing: true,
        serverSide: true,
        pageLength: 25,
        order: [[8, 'desc']],
        ajax: {
            url: '{{ path('mtf_states_data') }}',
            data: function(d){ d.symbol = $('#filterSymbol').val(); }
        },
        columns: [
            { data: 'id', render: d => `<code>${d}</code>` },
            { data: 'symbol', render: d => `<strong>${d}</strong>` },
            { data: 'k4h_time', render: renderTf('4h', 'danger') },
            { data: 'k1h_time', render: renderTf('1h', 'success') },
            { data: 'k15m_time', render: renderTf('15m', 'warning') },
            { data: 'k5m_time', render: renderTf('5m', 'secondary') },
            { data: 'k1m_time', render: renderTf('1m', 'primary') },
            { data: 'sides', orderable:false, render: renderSides },
            { data: 'updated_at' },
        ],
        columnDefs: [ { orderable: false, targets: [7] } ]
    });

    // Filtres
    $('#filterSymbol').on('change keyup', function() {
        applyFilters();
    });

    // Auto-refresh
    $('#autoRefresh').on('change', function() {
        if (this.checked) {
            startAutoRefresh();
        } else {
            stopAutoRefresh();
        }
    });

    // Démarrer l'auto-refresh par défaut
    startAutoRefresh();
});

function applyFilters() {
    const table = $('#mtfStatesTable').DataTable();
    const symbol = $('#filterSymbol').val();

    // Réinitialiser les filtres
    table.search('').columns().search('').draw();

    // Appliquer les filtres
    if (symbol) {
        table.column(1).search(symbol, false, false);
    }

    table.draw();
}

function clearFilters() {
    $('#filterSymbol').val('');
    $('#mtfStatesTable').DataTable().search('').columns().search('').draw();
}

function refreshTable() {
    location.reload();
}

function startAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
    }
    autoRefreshInterval = setInterval(function() {
        $('#mtfStatesTable').DataTable().ajax.reload(null, false);
        loadStats();
    }, 30000); // 30 secondes
}

function stopAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
    }
}

// Nettoyer l'intervalle quand la page se ferme
window.addEventListener('beforeunload', function() {
    stopAutoRefresh();
});
</script>

<style>
.timeframe-cell {
    min-width: 120px;
}

.side-item {
    display: flex;
    gap: 5px;
    align-items: center;
}

.sides-container {
    max-width: 150px;
}
</style>
<script>
function renderTf(label, color){
    return function(val){
        const badge = `<span class="badge bg-${color}">${label}</span>`;
        if (!val) return badge + ' <span class="badge bg-secondary">Manquant</span>';
        const dt = new Date(val + 'Z');
        const ageMin = Math.floor((Date.now() - dt.getTime())/60000);
        let st = 'danger', txt = 'Ancien';
        if (ageMin < 5) { st = 'success'; txt = 'À jour'; }
        else if (ageMin < 15) { st = 'warning'; txt = 'Récent'; }
        return `${badge} <span class="badge bg-${st}">${txt}</span><div class="small text-muted">${dt.toLocaleString()}</div>`;
    }
}
function renderSides(sides){
    if (!sides || Object.keys(sides).length === 0) return '<span class="text-muted">-</span>';
    const parts = [];
    for (const [tf, side] of Object.entries(sides)){
        const sideBadge = side === 'long' ? '<span class="badge bg-success">long</span>' : '<span class="badge bg-danger">short</span>';
        parts.push(`<div class="side-item mb-1"><span class="badge bg-info">${tf}</span> ${sideBadge}</div>`);
    }
    return `<div class="sides-container">${parts.join('')}</div>`;
}
</script>
{% endblock %}
