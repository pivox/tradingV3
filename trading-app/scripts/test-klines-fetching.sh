#!/bin/bash

# Script de test pour la r√©cup√©ration des klines depuis BitMart
# Usage: ./scripts/test-klines-fetching.sh

set -e

# Configuration
API_BASE="http://localhost:8082"
ENDPOINT="/indicators/revalidate"

echo "=========================================="
echo "Test de r√©cup√©ration des klines depuis BitMart"
echo "=========================================="
echo "URL: $API_BASE$ENDPOINT"
echo ""

# Test 1: Test avec une date r√©cente pour v√©rifier la r√©cup√©ration des klines
echo "Test 1: R√©cup√©ration des klines pour une date r√©cente"
echo "----------------------------------------"
RECENT_DATE="2024-10-01"
TEST_CONTRACTS="BTCUSDT,ETHUSDT"
echo "Date test√©e: $RECENT_DATE"
echo "Contrats test√©s: $TEST_CONTRACTS"

RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$RECENT_DATE\", \"contracts\": \"$TEST_CONTRACTS\", \"timeframe\": \"1h\"}")

if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
    echo "‚úÖ Revalidation r√©ussie avec r√©cup√©ration des klines"
    
    # Analyser les r√©sultats
    for contract in BTCUSDT ETHUSDT; do
        echo ""
        echo "üìä Analyse du contrat: $contract"
        echo "----------------------------------------"
        
        CONTRACT_DATA=$(echo "$RESPONSE" | jq -r ".data.contracts_results.$contract")
        
        if [ "$CONTRACT_DATA" != "null" ]; then
            STATUS=$(echo "$CONTRACT_DATA" | jq -r '.status')
            SUCCESS_RATE=$(echo "$CONTRACT_DATA" | jq -r '.summary.success_rate')
            PASSED=$(echo "$CONTRACT_DATA" | jq -r '.summary.passed')
            TOTAL=$(echo "$CONTRACT_DATA" | jq -r '.summary.total_conditions')
            
            echo "  Statut: $STATUS"
            echo "  Taux de succ√®s: $SUCCESS_RATE%"
            echo "  Conditions: $PASSED/$TOTAL"
            
            # V√©rifier les donn√©es klines
            CONTEXT=$(echo "$CONTRACT_DATA" | jq -r '.context')
            if [ "$CONTEXT" != "null" ]; then
                CLOSE=$(echo "$CONTEXT" | jq -r '.close // "N/A"')
                RSI=$(echo "$CONTEXT" | jq -r '.rsi // "N/A"')
                MACD=$(echo "$CONTEXT" | jq -r '.macd.macd // "N/A"')
                VWAP=$(echo "$CONTEXT" | jq -r '.vwap // "N/A"')
                ATR=$(echo "$CONTEXT" | jq -r '.atr // "N/A"')
                
                echo "  üìà Donn√©es klines r√©cup√©r√©es:"
                echo "    - Prix de cl√¥ture: $CLOSE"
                echo "    - RSI: $RSI"
                echo "    - MACD: $MACD"
                echo "    - VWAP: $VWAP"
                echo "    - ATR: $ATR"
                
                # V√©rifier si les donn√©es semblent r√©alistes
                if [ "$CLOSE" != "N/A" ] && [ "$CLOSE" != "null" ]; then
                    echo "  ‚úÖ Donn√©es klines valides r√©cup√©r√©es depuis BitMart"
                else
                    echo "  ‚ö†Ô∏è  Donn√©es klines manquantes ou invalides"
                fi
            else
                echo "  ‚ùå Aucun contexte klines disponible"
            fi
        else
            echo "  ‚ùå Aucune donn√©e disponible pour $contract"
        fi
    done
else
    echo "‚ùå Erreur lors de la revalidation"
    echo "$RESPONSE" | jq -r '.error, .message'
fi
echo ""

# Test 2: Test avec diff√©rents timeframes pour v√©rifier la r√©cup√©ration
echo "Test 2: R√©cup√©ration des klines pour diff√©rents timeframes"
echo "----------------------------------------"
TEST_CONTRACT="BTCUSDT"
TIMEFRAMES=("1m" "5m" "15m" "1h" "4h")

for tf in "${TIMEFRAMES[@]}"; do
    echo "Test timeframe: $tf"
    
    TF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"$RECENT_DATE\", \"contracts\": \"$TEST_CONTRACT\", \"timeframe\": \"$tf\"}")
    
    if echo "$TF_RESPONSE" | jq -e '.success' > /dev/null; then
        SUCCESS_RATE=$(echo "$TF_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.summary.success_rate')
        PASSED=$(echo "$TF_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.summary.passed')
        TOTAL=$(echo "$TF_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.summary.total_conditions')
        
        # V√©rifier les donn√©es klines
        CONTEXT=$(echo "$TF_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.context')
        CLOSE=$(echo "$CONTEXT" | jq -r '.close // "N/A"')
        
        if [ "$CLOSE" != "N/A" ] && [ "$CLOSE" != "null" ]; then
            echo "  ‚úÖ $tf: $PASSED/$TOTAL conditions ($SUCCESS_RATE%) - Klines r√©cup√©r√©es"
        else
            echo "  ‚ö†Ô∏è  $tf: $PASSED/$TOTAL conditions ($SUCCESS_RATE%) - Klines manquantes"
        fi
    else
        echo "  ‚ùå $tf: Erreur"
    fi
done
echo ""

# Test 3: Test avec une date plus ancienne
echo "Test 3: R√©cup√©ration des klines pour une date ancienne"
echo "----------------------------------------"
OLD_DATE="2024-01-01"
echo "Date test√©e: $OLD_DATE"

OLD_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$OLD_DATE\", \"contracts\": \"BTCUSDT\", \"timeframe\": \"1h\"}")

if echo "$OLD_RESPONSE" | jq -e '.success' > /dev/null; then
    SUCCESS_RATE=$(echo "$OLD_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.summary.success_rate')
    CONTEXT=$(echo "$OLD_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.context')
    CLOSE=$(echo "$CONTEXT" | jq -r '.close // "N/A"')
    
    if [ "$CLOSE" != "N/A" ] && [ "$CLOSE" != "null" ]; then
        echo "  ‚úÖ Date ancienne: Taux de succ√®s $SUCCESS_RATE% - Klines r√©cup√©r√©es"
    else
        echo "  ‚ö†Ô∏è  Date ancienne: Taux de succ√®s $SUCCESS_RATE% - Klines manquantes"
    fi
else
    echo "  ‚ùå Erreur pour la date ancienne"
fi
echo ""

# Test 4: Test de performance avec r√©cup√©ration des klines
echo "Test 4: Performance avec r√©cup√©ration des klines"
echo "----------------------------------------"
MANY_CONTRACTS="BTCUSDT,ETHUSDT,ADAUSDT"
echo "Test avec 3 contrats: $MANY_CONTRACTS"

START_TIME=$(date +%s)
PERF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$RECENT_DATE\", \"contracts\": \"$MANY_CONTRACTS\", \"timeframe\": \"1h\"}")
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

if echo "$PERF_RESPONSE" | jq -e '.success' > /dev/null; then
    CONTRACT_COUNT=$(echo "$PERF_RESPONSE" | jq -r '.data.global_summary.total_contracts')
    SUCCESS_RATE=$(echo "$PERF_RESPONSE" | jq -r '.data.global_summary.success_rate')
    
    echo "  ‚úÖ $CONTRACT_COUNT contrats trait√©s en ${DURATION}s"
    echo "  üìä Taux de succ√®s global: $SUCCESS_RATE%"
    
    # V√©rifier que les klines ont √©t√© r√©cup√©r√©es pour tous les contrats
    KLINE_COUNT=0
    for contract in BTCUSDT ETHUSDT ADAUSDT; do
        CONTEXT=$(echo "$PERF_RESPONSE" | jq -r ".data.contracts_results.$contract.context")
        CLOSE=$(echo "$CONTEXT" | jq -r '.close // "N/A"')
        if [ "$CLOSE" != "N/A" ] && [ "$CLOSE" != "null" ]; then
            KLINE_COUNT=$((KLINE_COUNT + 1))
        fi
    done
    
    echo "  üìà Contrats avec klines r√©cup√©r√©es: $KLINE_COUNT/$CONTRACT_COUNT"
else
    echo "  ‚ùå Erreur lors du test de performance"
fi
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úÖ R√©cup√©ration des klines depuis BitMart"
echo "  ‚úÖ D√©tection et comblement des trous dans les donn√©es"
echo "  ‚úÖ Support de diff√©rents timeframes"
echo "  ‚úÖ Gestion des dates anciennes et r√©centes"
echo "  ‚úÖ Performance avec r√©cup√©ration des klines"
echo ""
echo "üåê Interface web disponible sur: $API_BASE/indicators/test"
echo "üìä Nouvelles fonctionnalit√©s:"
echo "  - R√©cup√©ration automatique des klines manquantes"
echo "  - D√©tection des gaps dans les donn√©es historiques"
echo "  - Comblement des trous via l'API BitMart"
echo "  - Validation avec les vraies donn√©es de march√©"
echo "  - Fallback vers donn√©es simul√©es si n√©cessaire"

