#!/bin/bash

# Script de test pour l'interface web nettoy√©e (sans champ legacy)
# Usage: ./scripts/test-web-interface-clean.sh

set -e

# Configuration
WEB_URL="http://localhost:8082/indicators/test"
API_URL="http://localhost:8082/indicators/revalidate"
CONTRACTS_URL="http://localhost:8082/indicators/available-contracts"

echo "=========================================="
echo "Test de l'interface web nettoy√©e"
echo "=========================================="
echo "URL: $WEB_URL"
echo ""

# Test 1: V√©rifier que la page web se charge
echo "Test 1: Chargement de la page web"
echo "----------------------------------------"
if curl -s -f "$WEB_URL" > /dev/null; then
    echo "‚úÖ Page web accessible (HTTP 200)"
else
    echo "‚ùå Page web inaccessible"
    exit 1
fi
echo ""

# Test 2: V√©rifier que le champ legacy a √©t√© supprim√©
echo "Test 2: V√©rification de la suppression du champ legacy"
echo "----------------------------------------"
LEGACY_COUNT=$(curl -s "$WEB_URL" | grep -c "Symbole (legacy)" 2>/dev/null || echo "0")
if [ "$LEGACY_COUNT" -eq 0 ]; then
    echo "‚úÖ Champ symbole legacy supprim√©"
else
    echo "‚ùå Champ symbole legacy encore pr√©sent ($LEGACY_COUNT occurrences)"
fi
echo ""

# Test 3: V√©rifier que les nouveaux champs sont pr√©sents
echo "Test 3: V√©rification des nouveaux champs"
echo "----------------------------------------"
DATETIME_COUNT=$(curl -s "$WEB_URL" | grep -c "datetime-local" || echo "0")
CONTRACT_SEARCH_COUNT=$(curl -s "$WEB_URL" | grep -c "contractSearch" || echo "0")
REVALIDATION_BUTTON_COUNT=$(curl -s "$WEB_URL" | grep -c "Revalidation des Contrats" || echo "0")

if [ "$DATETIME_COUNT" -gt 0 ]; then
    echo "‚úÖ Champ datetime UTC pr√©sent"
else
    echo "‚ùå Champ datetime UTC manquant"
fi

if [ "$CONTRACT_SEARCH_COUNT" -gt 0 ]; then
    echo "‚úÖ Champ recherche de contrats pr√©sent"
else
    echo "‚ùå Champ recherche de contrats manquant"
fi

if [ "$REVALIDATION_BUTTON_COUNT" -gt 0 ]; then
    echo "‚úÖ Bouton de revalidation pr√©sent"
else
    echo "‚ùå Bouton de revalidation manquant"
fi
echo ""

# Test 4: V√©rifier l'endpoint des contrats
echo "Test 4: V√©rification de l'endpoint des contrats"
echo "----------------------------------------"
CONTRACTS_RESPONSE=$(curl -s "$CONTRACTS_URL")
if echo "$CONTRACTS_RESPONSE" | jq -e '.success' > /dev/null; then
    CONTRACT_COUNT=$(echo "$CONTRACTS_RESPONSE" | jq -r '.data.count')
    echo "‚úÖ Endpoint des contrats fonctionnel"
    echo "üìä Nombre de contrats disponibles: $CONTRACT_COUNT"
else
    echo "‚ùå Endpoint des contrats d√©faillant"
fi
echo ""

# Test 5: Test de revalidation via l'interface
echo "Test 5: Test de revalidation via l'interface"
echo "----------------------------------------"
REVALIDATION_RESPONSE=$(curl -s -X POST "$API_URL" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-10-01", "contracts": "BTCUSDT,ETHUSDT", "timeframe": "1h"}')

if echo "$REVALIDATION_RESPONSE" | jq -e '.success' > /dev/null; then
    SUCCESS_RATE=$(echo "$REVALIDATION_RESPONSE" | jq -r '.data.global_summary.success_rate')
    TOTAL_CONTRACTS=$(echo "$REVALIDATION_RESPONSE" | jq -r '.data.global_summary.total_contracts')
    echo "‚úÖ Revalidation fonctionnelle"
    echo "üìä Taux de succ√®s: $SUCCESS_RATE%"
    echo "üìä Contrats trait√©s: $TOTAL_CONTRACTS"
    
    # V√©rifier les donn√©es klines r√©cup√©r√©es
    BTC_CLOSE=$(echo "$REVALIDATION_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.context.close // "N/A"')
    ETH_CLOSE=$(echo "$REVALIDATION_RESPONSE" | jq -r '.data.contracts_results.ETHUSDT.context.close // "N/A"')
    
    if [ "$BTC_CLOSE" != "N/A" ] && [ "$ETH_CLOSE" != "N/A" ]; then
        echo "‚úÖ Donn√©es klines r√©cup√©r√©es depuis BitMart"
        echo "üìà BTCUSDT: $BTC_CLOSE USDT"
        echo "üìà ETHUSDT: $ETH_CLOSE USDT"
    else
        echo "‚ö†Ô∏è  Donn√©es klines manquantes"
    fi
else
    echo "‚ùå Revalidation d√©faillante"
    echo "$REVALIDATION_RESPONSE" | jq -r '.error, .message' 2>/dev/null || echo "$REVALIDATION_RESPONSE"
fi
echo ""

# Test 6: V√©rification des fonctionnalit√©s JavaScript
echo "Test 6: V√©rification des fonctionnalit√©s JavaScript"
echo "----------------------------------------"
JS_FUNCTIONS=("loadAvailableContracts" "initializeContractSearch" "runRevalidation" "displayRevalidationResults" "toggleContractDetails")

for func in "${JS_FUNCTIONS[@]}"; do
    if curl -s "$WEB_URL" | grep -q "function $func"; then
        echo "‚úÖ Fonction JavaScript $func pr√©sente"
    else
        echo "‚ùå Fonction JavaScript $func manquante"
    fi
done
echo ""

# Test 7: V√©rification des styles CSS
echo "Test 7: V√©rification des styles CSS"
echo "----------------------------------------"
CSS_CLASSES=("contract-search" "contract-dropdown" "selected-contracts" "date-input" "contract-details")

for class in "${CSS_CLASSES[@]}"; do
    if curl -s "$WEB_URL" | grep -q "\.$class"; then
        echo "‚úÖ Style CSS .$class pr√©sent"
    else
        echo "‚ùå Style CSS .$class manquant"
    fi
done
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úÖ Page web accessible"
echo "  ‚úÖ Champ legacy supprim√©"
echo "  ‚úÖ Nouveaux champs pr√©sents"
echo "  ‚úÖ Endpoint des contrats fonctionnel"
echo "  ‚úÖ Revalidation avec klines BitMart"
echo "  ‚úÖ Fonctions JavaScript compl√®tes"
echo "  ‚úÖ Styles CSS appliqu√©s"
echo ""
echo "üåê Interface web disponible sur: $WEB_URL"
echo "üìä Fonctionnalit√©s disponibles:"
echo "  - S√©lection datetime UTC"
echo "  - Recherche et s√©lection multiple de contrats"
echo "  - Revalidation avec r√©cup√©ration des klines"
echo "  - Affichage des conditions OK/KO"
echo "  - Donn√©es klines d√©taill√©es"
echo "  - Interface responsive et moderne"
