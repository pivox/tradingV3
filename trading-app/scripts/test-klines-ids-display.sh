#!/bin/bash

# Script de test pour v√©rifier l'affichage des IDs des klines utilis√©es
# Usage: ./scripts/test-klines-ids-display.sh

set -e

# Configuration
API_BASE="http://localhost:8082"
ENDPOINT="/indicators/revalidate"

echo "=========================================="
echo "Test d'affichage des IDs des klines utilis√©es"
echo "=========================================="
echo "URL: $API_BASE$ENDPOINT"
echo ""

# Test 1: V√©rifier que les informations des klines sont pr√©sentes
echo "Test 1: V√©rification des informations des klines"
echo "----------------------------------------"
RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-10-01", "contracts": "BTCUSDT", "timeframe": "1h"}')

KLINES_USED=$(echo "$RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.context.klines_used')

echo "Informations des klines utilis√©es:"
echo "$KLINES_USED" | jq '.'

# V√©rifier les propri√©t√©s
COUNT=$(echo "$KLINES_USED" | jq -r '.count // 0')
IDS_COUNT=$(echo "$KLINES_USED" | jq -r '.ids | length')
TIMESTAMPS_COUNT=$(echo "$KLINES_USED" | jq -r '.timestamps | length')
FROM_DATE=$(echo "$KLINES_USED" | jq -r '.date_range.from // "N/A"')
TO_DATE=$(echo "$KLINES_USED" | jq -r '.date_range.to // "N/A"')

echo ""
echo "üìä Statistiques des klines:"
echo "  - Nombre total: $COUNT"
echo "  - IDs disponibles: $IDS_COUNT"
echo "  - Timestamps disponibles: $TIMESTAMPS_COUNT"
echo "  - P√©riode: $FROM_DATE ‚Üí $TO_DATE"

if [ "$COUNT" -gt 0 ] && [ "$IDS_COUNT" -gt 0 ]; then
    echo "‚úÖ Informations des klines correctement g√©n√©r√©es"
else
    echo "‚ùå Informations des klines manquantes"
fi
echo ""

# Test 2: V√©rifier les premiers et derniers IDs
echo "Test 2: V√©rification des IDs des klines"
echo "----------------------------------------"
FIRST_ID=$(echo "$KLINES_USED" | jq -r '.ids[0] // "N/A"')
LAST_ID=$(echo "$KLINES_USED" | jq -r '.ids[-1] // "N/A"')
FIRST_TIMESTAMP=$(echo "$KLINES_USED" | jq -r '.timestamps[0] // "N/A"')
LAST_TIMESTAMP=$(echo "$KLINES_USED" | jq -r '.timestamps[-1] // "N/A"')

echo "üîç D√©tails des klines:"
echo "  - Premier ID: $FIRST_ID"
echo "  - Dernier ID: $LAST_ID"
echo "  - Premier timestamp: $FIRST_TIMESTAMP"
echo "  - Dernier timestamp: $LAST_TIMESTAMP"

if [ "$FIRST_ID" != "N/A" ] && [ "$LAST_ID" != "N/A" ]; then
    echo "‚úÖ IDs des klines correctement r√©cup√©r√©s"
else
    echo "‚ùå IDs des klines manquants"
fi
echo ""

# Test 3: V√©rifier la coh√©rence des donn√©es
echo "Test 3: V√©rification de la coh√©rence des donn√©es"
echo "----------------------------------------"
if [ "$COUNT" = "$IDS_COUNT" ] && [ "$COUNT" = "$TIMESTAMPS_COUNT" ]; then
    echo "‚úÖ Coh√©rence des donn√©es: tous les compteurs correspondent"
else
    echo "‚ö†Ô∏è  Incoh√©rence d√©tect√©e:"
    echo "    - Count: $COUNT"
    echo "    - IDs: $IDS_COUNT"
    echo "    - Timestamps: $TIMESTAMPS_COUNT"
fi
echo ""

# Test 4: Test avec diff√©rents timeframes
echo "Test 4: Test avec diff√©rents timeframes"
echo "----------------------------------------"
TIMEFRAMES=("1m" "5m" "15m" "1h" "4h")

for tf in "${TIMEFRAMES[@]}"; do
    echo "Test avec timeframe $tf:"
    
    TF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"2024-10-01\", \"contracts\": \"BTCUSDT\", \"timeframe\": \"$tf\"}")
    
    TF_KLINES_USED=$(echo "$TF_RESPONSE" | jq -r ".data.contracts_results.BTCUSDT.context.klines_used")
    TF_COUNT=$(echo "$TF_KLINES_USED" | jq -r '.count // 0')
    TF_IDS_COUNT=$(echo "$TF_KLINES_USED" | jq -r '.ids | length')
    
    if [ "$TF_COUNT" -gt 0 ] && [ "$TF_IDS_COUNT" -gt 0 ]; then
        echo "  ‚úÖ $tf: $TF_COUNT klines avec $TF_IDS_COUNT IDs"
    else
        echo "  ‚ùå $tf: Donn√©es manquantes"
    fi
done
echo ""

# Test 5: Test avec diff√©rents contrats
echo "Test 5: Test avec diff√©rents contrats"
echo "----------------------------------------"
CONTRACTS=("ETHUSDT" "ADAUSDT" "SOLUSDT")

for contract in "${CONTRACTS[@]}"; do
    echo "Test avec $contract:"
    
    CONTRACT_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"2024-10-01\", \"contracts\": \"$contract\", \"timeframe\": \"1h\"}")
    
    CONTRACT_KLINES_USED=$(echo "$CONTRACT_RESPONSE" | jq -r ".data.contracts_results.$contract.context.klines_used")
    CONTRACT_COUNT=$(echo "$CONTRACT_KLINES_USED" | jq -r '.count // 0')
    CONTRACT_IDS_COUNT=$(echo "$CONTRACT_KLINES_USED" | jq -r '.ids | length')
    
    if [ "$CONTRACT_COUNT" -gt 0 ] && [ "$CONTRACT_IDS_COUNT" -gt 0 ]; then
        echo "  ‚úÖ $contract: $CONTRACT_COUNT klines avec $CONTRACT_IDS_COUNT IDs"
    else
        echo "  ‚ùå $contract: Donn√©es manquantes"
    fi
done
echo ""

# Test 6: V√©rifier l'affichage dans l'interface web
echo "Test 6: V√©rification de l'affichage dans l'interface web"
echo "----------------------------------------"
WEB_PAGE=$(curl -s "$API_BASE/indicators/test")

if echo "$WEB_PAGE" | grep -q "Klines Utilis√©es"; then
    echo "‚úÖ Section 'Klines Utilis√©es' pr√©sente dans l'interface web"
else
    echo "‚ùå Section 'Klines Utilis√©es' manquante dans l'interface web"
fi

if echo "$WEB_PAGE" | grep -q "klines-used-section"; then
    echo "‚úÖ CSS pour la section klines utilis√©es pr√©sent"
else
    echo "‚ùå CSS pour la section klines utilis√©es manquant"
fi

if echo "$WEB_PAGE" | grep -q "displayIds"; then
    echo "‚úÖ JavaScript pour l'affichage des IDs pr√©sent"
else
    echo "‚ùå JavaScript pour l'affichage des IDs manquant"
fi
echo ""

# Test 7: Test de performance avec beaucoup de klines
echo "Test 7: Test de performance avec beaucoup de klines"
echo "----------------------------------------"
echo "Test avec une date r√©cente (plus de klines disponibles):"

PERF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-12-01", "contracts": "BTCUSDT", "timeframe": "1m"}')

PERF_KLINES_USED=$(echo "$PERF_RESPONSE" | jq -r '.data.contracts_results.BTCUSDT.context.klines_used')
PERF_COUNT=$(echo "$PERF_KLINES_USED" | jq -r '.count // 0')
PERF_IDS_COUNT=$(echo "$PERF_KLINES_USED" | jq -r '.ids | length')

echo "üìä Performance avec timeframe 1m:"
echo "  - Nombre de klines: $PERF_COUNT"
echo "  - Nombre d'IDs: $PERF_IDS_COUNT"

if [ "$PERF_COUNT" -gt 1000 ]; then
    echo "‚úÖ Performance: Gestion correcte d'un grand nombre de klines"
else
    echo "‚ö†Ô∏è  Performance: Nombre de klines limit√©"
fi
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úÖ Affichage des IDs des klines utilis√©es"
echo "  ‚úÖ Affichage des timestamps des klines"
echo "  ‚úÖ Affichage de la p√©riode couverte"
echo "  ‚úÖ Coh√©rence des donn√©es (count, IDs, timestamps)"
echo "  ‚úÖ Fonctionnement sur diff√©rents timeframes"
echo "  ‚úÖ Fonctionnement sur diff√©rents contrats"
echo "  ‚úÖ Interface web avec section d√©di√©e"
echo "  ‚úÖ Performance avec un grand nombre de klines"
echo ""
echo "üí° Informations affich√©es:"
echo "  - Nombre total de klines utilis√©es"
echo "  - P√©riode couverte (from ‚Üí to)"
echo "  - Liste des IDs (limit√©e √† 10 pour l'affichage)"
echo "  - Liste des timestamps (limit√©e √† 5 pour l'affichage)"
echo "  - Indication du nombre d'√©l√©ments suppl√©mentaires"
echo ""
echo "üåê Interface web: $API_BASE/indicators/test"

