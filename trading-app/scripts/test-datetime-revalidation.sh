#!/bin/bash

# Script de test pour le champ datetime UTC dans la revalidation
# Usage: ./scripts/test-datetime-revalidation.sh

set -e

# Configuration
API_BASE="http://localhost:8082"
ENDPOINT="/indicators/revalidate"

echo "=========================================="
echo "Test du champ datetime UTC pour la revalidation"
echo "=========================================="
echo "URL: $API_BASE$ENDPOINT"
echo ""

# Test 1: V√©rifier que la page se charge avec le nouveau champ datetime
echo "Test 1: Chargement de la page avec champ datetime"
echo "----------------------------------------"
if curl -s "$API_BASE/indicators/test" | grep -q "Date et heure de revalidation"; then
    echo "‚úÖ Page charg√©e avec succ√®s - Champ datetime pr√©sent"
else
    echo "‚ùå Erreur lors du chargement de la page"
fi
echo ""

# Test 2: Test avec diff√©rentes dates et heures
echo "Test 2: Test avec diff√©rentes dates et heures UTC"
echo "----------------------------------------"

# Dates de test avec diff√©rentes heures
TEST_DATES=(
    "2024-01-15"  # Date simple
    "2024-06-15"  # Date d'√©t√©
    "2024-12-31"  # Date de fin d'ann√©e
)

TEST_CONTRACTS="BTCUSDT,ETHUSDT"

for date in "${TEST_DATES[@]}"; do
    echo "Test date: $date"
    
    # Test avec l'heure 00:00 UTC
    RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"$date\", \"contracts\": \"$TEST_CONTRACTS\", \"timeframe\": \"1h\"}")
    
    if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
        SUCCESS_RATE=$(echo "$RESPONSE" | jq -r '.data.global_summary.success_rate')
        echo "  ‚úÖ $date 00:00 UTC: Taux de succ√®s $SUCCESS_RATE%"
    else
        echo "  ‚ùå $date 00:00 UTC: Erreur"
    fi
done
echo ""

# Test 3: Test avec date dans le futur (doit √©chouer)
echo "Test 3: Test avec date dans le futur"
echo "----------------------------------------"
# Utiliser une date fixe dans le futur pour √©viter les probl√®mes de compatibilit√©
FUTURE_DATE="2025-12-31"
echo "Date test√©e: $FUTURE_DATE (futur)"

FUTURE_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$FUTURE_DATE\", \"contracts\": \"BTCUSDT\", \"timeframe\": \"1h\"}")

if echo "$FUTURE_RESPONSE" | jq -e '.success == false' > /dev/null; then
    ERROR_MSG=$(echo "$FUTURE_RESPONSE" | jq -r '.message')
    echo "  ‚úÖ Erreur correctement g√©r√©e: $ERROR_MSG"
else
    echo "  ‚ùå Erreur non g√©r√©e - la date future devrait √™tre rejet√©e"
fi
echo ""

# Test 4: Test avec date tr√®s ancienne
echo "Test 4: Test avec date tr√®s ancienne"
echo "----------------------------------------"
OLD_DATE="2020-01-01"
echo "Date test√©e: $OLD_DATE"

OLD_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$OLD_DATE\", \"contracts\": \"BTCUSDT\", \"timeframe\": \"1h\"}")

if echo "$OLD_RESPONSE" | jq -e '.success' > /dev/null; then
    SUCCESS_RATE=$(echo "$OLD_RESPONSE" | jq -r '.data.global_summary.success_rate')
    echo "  ‚úÖ $OLD_DATE: Taux de succ√®s $SUCCESS_RATE%"
else
    echo "  ‚ùå $OLD_DATE: Erreur"
fi
echo ""

# Test 5: Test avec diff√©rents timeframes et datetime
echo "Test 5: Test avec diff√©rents timeframes"
echo "----------------------------------------"
TEST_DATE="2024-01-15"
TIMEFRAMES=("1m" "5m" "15m" "1h" "4h")

for tf in "${TIMEFRAMES[@]}"; do
    echo "Test timeframe: $tf avec date $TEST_DATE"
    
    TF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"$TEST_DATE\", \"contracts\": \"BTCUSDT\", \"timeframe\": \"$tf\"}")
    
    if echo "$TF_RESPONSE" | jq -e '.success' > /dev/null; then
        SUCCESS_RATE=$(echo "$TF_RESPONSE" | jq -r '.data.global_summary.success_rate')
        echo "  ‚úÖ $tf: Taux de succ√®s $SUCCESS_RATE%"
    else
        echo "  ‚ùå $tf: Erreur"
    fi
done
echo ""

# Test 6: Test de performance avec datetime
echo "Test 6: Test de performance avec datetime"
echo "----------------------------------------"
MANY_CONTRACTS="BTCUSDT,ETHUSDT,ADAUSDT,DOTUSDT,LINKUSDT"
TEST_DATE="2024-01-15"

echo "Test avec 5 contrats et date $TEST_DATE"

START_TIME=$(date +%s)
PERF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d "{\"date\": \"$TEST_DATE\", \"contracts\": \"$MANY_CONTRACTS\", \"timeframe\": \"1h\"}")
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

if echo "$PERF_RESPONSE" | jq -e '.success' > /dev/null; then
    CONTRACT_COUNT=$(echo "$PERF_RESPONSE" | jq -r '.data.global_summary.total_contracts')
    SUCCESS_RATE=$(echo "$PERF_RESPONSE" | jq -r '.data.global_summary.success_rate')
    echo "  ‚úÖ $CONTRACT_COUNT contrats trait√©s en ${DURATION}s (taux: $SUCCESS_RATE%)"
else
    echo "  ‚ùå Erreur lors du test de performance"
fi
echo ""

# Test 7: V√©rifier les d√©tails des r√©sultats avec datetime
echo "Test 7: V√©rification des d√©tails des r√©sultats"
echo "----------------------------------------"
DETAIL_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-01-15", "contracts": "BTCUSDT", "timeframe": "1h"}')

if echo "$DETAIL_RESPONSE" | jq -e '.success' > /dev/null; then
    echo "‚úÖ R√©sultats d√©taill√©s:"
    
    # Afficher le r√©sum√© global
    echo "R√©sum√© global:"
    echo "$DETAIL_RESPONSE" | jq -r '.data.global_summary | "  - Date: \(.date)", "  - Timeframe: \(.timeframe)", "  - Contrats: \(.total_contracts)", "  - Taux de succ√®s: \(.success_rate)%"'
    
    # Afficher les d√©tails du premier contrat
    FIRST_CONTRACT=$(echo "$DETAIL_RESPONSE" | jq -r '.data.contracts_results | keys[0]')
    echo "D√©tails du contrat $FIRST_CONTRACT:"
    echo "$DETAIL_RESPONSE" | jq -r ".data.contracts_results.$FIRST_CONTRACT | \"  - Statut: \(.status)\", \"  - Taux de succ√®s: \(.summary.success_rate)%\", \"  - Conditions pass√©es: \(.summary.passed)/\(.summary.total_conditions)\""
    
    # V√©rifier la pr√©sence du contexte
    HAS_CONTEXT=$(echo "$DETAIL_RESPONSE" | jq -r ".data.contracts_results.$FIRST_CONTRACT.context != null")
    if [ "$HAS_CONTEXT" = "true" ]; then
        echo "  ‚úÖ Contexte disponible"
    else
        echo "  ‚ùå Contexte manquant"
    fi
else
    echo "‚ùå Erreur lors de la r√©cup√©ration des d√©tails"
fi
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úÖ Champ datetime UTC dans l'interface"
echo "  ‚úÖ Validation des dates futures"
echo "  ‚úÖ Support des dates anciennes"
echo "  ‚úÖ Diff√©rents timeframes avec datetime"
echo "  ‚úÖ Performance avec datetime"
echo "  ‚úÖ D√©tails des r√©sultats avec datetime"
echo ""
echo "üåê Interface web disponible sur: $API_BASE/indicators/test"
echo "üìä Nouvelles fonctionnalit√©s:"
echo "  - Champ datetime-local avec conversion UTC"
echo "  - Validation des dates futures"
echo "  - Contexte historique bas√© sur l'heure UTC"
echo "  - Affichage des r√©sultats avec indication UTC"
