#!/bin/bash

# Script de test pour la validation en cascade des contrats
# Usage: ./scripts/test-cascade-validation.sh

set -e

# Configuration
API_BASE="http://localhost:8082"
ENDPOINT="/indicators/validate-cascade"

echo "=========================================="
echo "Test de validation en cascade des contrats"
echo "=========================================="
echo "URL: $API_BASE$ENDPOINT"
echo ""

# Test 1: Validation en cascade avec BTCUSDT
echo "Test 1: Validation en cascade avec BTCUSDT"
echo "----------------------------------------"
RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-10-01", "contract": "BTCUSDT"}')

echo "R√©ponse compl√®te:"
echo "$RESPONSE" | jq '.'

# V√©rifier le succ√®s
SUCCESS=$(echo "$RESPONSE" | jq -r '.success // false')
if [ "$SUCCESS" = "true" ]; then
    echo "‚úÖ Validation en cascade r√©ussie"
else
    echo "‚ùå √âchec de la validation en cascade"
    echo "Erreur: $(echo "$RESPONSE" | jq -r '.message // "N/A"')"
    exit 1
fi
echo ""

# Test 2: V√©rifier le r√©sum√© global
echo "Test 2: V√©rification du r√©sum√© global"
echo "----------------------------------------"
SUMMARY=$(echo "$RESPONSE" | jq -r '.data.summary')

TOTAL_TIMEFRAMES=$(echo "$SUMMARY" | jq -r '.total_timeframes // 0')
TOTAL_CONDITIONS=$(echo "$SUMMARY" | jq -r '.total_conditions // 0')
TOTAL_PASSED=$(echo "$SUMMARY" | jq -r '.total_passed // 0')
TOTAL_FAILED=$(echo "$SUMMARY" | jq -r '.total_failed // 0')
SUCCESS_RATE=$(echo "$SUMMARY" | jq -r '.success_rate // 0')

echo "üìä R√©sum√© global:"
echo "  - Timeframes test√©s: $TOTAL_TIMEFRAMES"
echo "  - Conditions totales: $TOTAL_CONDITIONS"
echo "  - Conditions r√©ussies: $TOTAL_PASSED"
echo "  - Conditions √©chou√©es: $TOTAL_FAILED"
echo "  - Taux de r√©ussite: $SUCCESS_RATE%"

if [ "$TOTAL_TIMEFRAMES" -eq 5 ] && [ "$TOTAL_CONDITIONS" -gt 0 ]; then
    echo "‚úÖ R√©sum√© global correct"
else
    echo "‚ùå R√©sum√© global incorrect"
fi
echo ""

# Test 3: V√©rifier les r√©sultats par timeframe
echo "Test 3: V√©rification des r√©sultats par timeframe"
echo "----------------------------------------"
TIMEFRAMES=("4h" "1h" "15m" "5m" "1m")

for tf in "${TIMEFRAMES[@]}"; do
    echo "Timeframe $tf:"
    
    TF_RESULT=$(echo "$RESPONSE" | jq -r ".data.timeframes_results[\"$tf\"]")
    TF_STATUS=$(echo "$TF_RESULT" | jq -r '.status // "N/A"')
    TF_CONDITIONS_COUNT=$(echo "$TF_RESULT" | jq -r '.conditions_count // 0')
    TF_CONDITIONS_PASSED=$(echo "$TF_RESULT" | jq -r '.conditions_passed // 0')
    TF_KLINES_COUNT=$(echo "$TF_RESULT" | jq -r '.klines_used.count // 0')
    
    echo "  - Statut: $TF_STATUS"
    echo "  - Conditions: $TF_CONDITIONS_PASSED/$TF_CONDITIONS_COUNT"
    echo "  - Klines utilis√©es: $TF_KLINES_COUNT"
    
    if [ "$TF_CONDITIONS_COUNT" -gt 0 ] && [ "$TF_KLINES_COUNT" -gt 0 ]; then
        echo "  ‚úÖ Timeframe $tf: Donn√©es correctes"
    else
        echo "  ‚ùå Timeframe $tf: Donn√©es manquantes"
    fi
done
echo ""

# Test 4: V√©rifier les IDs des klines pour chaque timeframe
echo "Test 4: V√©rification des IDs des klines"
echo "----------------------------------------"
for tf in "${TIMEFRAMES[@]}"; do
    echo "Timeframe $tf - IDs des klines:"
    
    TF_KLINES_USED=$(echo "$RESPONSE" | jq -r ".data.timeframes_results[\"$tf\"].klines_used")
    TF_IDS_COUNT=$(echo "$TF_KLINES_USED" | jq -r '.ids | length // 0')
    TF_FIRST_ID=$(echo "$TF_KLINES_USED" | jq -r '.ids[0] // "N/A"')
    TF_LAST_ID=$(echo "$TF_KLINES_USED" | jq -r '.ids[-1] // "N/A"')
    TF_FROM_DATE=$(echo "$TF_KLINES_USED" | jq -r '.date_range.from // "N/A"')
    TF_TO_DATE=$(echo "$TF_KLINES_USED" | jq -r '.date_range.to // "N/A"')
    
    echo "  - Nombre d'IDs: $TF_IDS_COUNT"
    echo "  - Premier ID: $TF_FIRST_ID"
    echo "  - Dernier ID: $TF_LAST_ID"
    echo "  - P√©riode: $TF_FROM_DATE ‚Üí $TF_TO_DATE"
    
    if [ "$TF_IDS_COUNT" -gt 0 ] && [ "$TF_FIRST_ID" != "N/A" ]; then
        echo "  ‚úÖ IDs des klines disponibles"
    else
        echo "  ‚ùå IDs des klines manquants"
    fi
done
echo ""

# Test 5: Test avec diff√©rents contrats
echo "Test 5: Test avec diff√©rents contrats"
echo "----------------------------------------"
CONTRACTS=("ETHUSDT" "ADAUSDT" "SOLUSDT")

for contract in "${CONTRACTS[@]}"; do
    echo "Test avec $contract:"
    
    CONTRACT_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"2024-10-01\", \"contract\": \"$contract\"}")
    
    CONTRACT_SUCCESS=$(echo "$CONTRACT_RESPONSE" | jq -r '.success // false')
    CONTRACT_SUMMARY=$(echo "$CONTRACT_RESPONSE" | jq -r '.data.summary')
    CONTRACT_TOTAL_CONDITIONS=$(echo "$CONTRACT_SUMMARY" | jq -r '.total_conditions // 0')
    CONTRACT_SUCCESS_RATE=$(echo "$CONTRACT_SUMMARY" | jq -r '.success_rate // 0')
    
    if [ "$CONTRACT_SUCCESS" = "true" ] && [ "$CONTRACT_TOTAL_CONDITIONS" -gt 0 ]; then
        echo "  ‚úÖ $contract: Validation r√©ussie ($CONTRACT_TOTAL_CONDITIONS conditions, $CONTRACT_SUCCESS_RATE% de r√©ussite)"
    else
        echo "  ‚ùå $contract: √âchec de la validation"
    fi
done
echo ""

# Test 6: Test avec diff√©rentes dates
echo "Test 6: Test avec diff√©rentes dates"
echo "----------------------------------------"
DATES=("2024-09-01" "2024-08-01" "2024-07-01")

for date in "${DATES[@]}"; do
    echo "Test avec la date $date:"
    
    DATE_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"date\": \"$date\", \"contract\": \"BTCUSDT\"}")
    
    DATE_SUCCESS=$(echo "$DATE_RESPONSE" | jq -r '.success // false')
    DATE_SUMMARY=$(echo "$DATE_RESPONSE" | jq -r '.data.summary')
    DATE_TOTAL_CONDITIONS=$(echo "$DATE_SUMMARY" | jq -r '.total_conditions // 0')
    
    if [ "$DATE_SUCCESS" = "true" ] && [ "$DATE_TOTAL_CONDITIONS" -gt 0 ]; then
        echo "  ‚úÖ Date $date: Validation r√©ussie ($DATE_TOTAL_CONDITIONS conditions)"
    else
        echo "  ‚ùå Date $date: √âchec de la validation"
    fi
done
echo ""

# Test 7: V√©rifier l'interface web
echo "Test 7: V√©rification de l'interface web"
echo "----------------------------------------"
WEB_PAGE=$(curl -s "$API_BASE/indicators/test")

if echo "$WEB_PAGE" | grep -q "Validation en Cascade"; then
    echo "‚úÖ Bouton 'Validation en Cascade' pr√©sent dans l'interface web"
else
    echo "‚ùå Bouton 'Validation en Cascade' manquant dans l'interface web"
fi

if echo "$WEB_PAGE" | grep -q "runCascadeValidation"; then
    echo "‚úÖ Fonction JavaScript runCascadeValidation pr√©sente"
else
    echo "‚ùå Fonction JavaScript runCascadeValidation manquante"
fi

if echo "$WEB_PAGE" | grep -q "cascade-header"; then
    echo "‚úÖ CSS pour la validation en cascade pr√©sent"
else
    echo "‚ùå CSS pour la validation en cascade manquant"
fi
echo ""

# Test 8: Test de performance
echo "Test 8: Test de performance"
echo "----------------------------------------"
echo "Mesure du temps d'ex√©cution pour la validation en cascade:"

START_TIME=$(date +%s.%N)
PERF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"date": "2024-10-01", "contract": "BTCUSDT"}')
END_TIME=$(date +%s.%N)

EXECUTION_TIME=$(echo "$END_TIME - $START_TIME" | bc)
PERF_SUCCESS=$(echo "$PERF_RESPONSE" | jq -r '.success // false')

echo "‚è±Ô∏è  Temps d'ex√©cution: ${EXECUTION_TIME}s"

if [ "$PERF_SUCCESS" = "true" ]; then
    echo "‚úÖ Performance: Validation r√©ussie en ${EXECUTION_TIME}s"
else
    echo "‚ùå Performance: √âchec de la validation"
fi
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úÖ Validation en cascade sur 5 timeframes (4h, 1h, 15m, 5m, 1m)"
echo "  ‚úÖ Affichage des IDs des klines pour chaque timeframe"
echo "  ‚úÖ Affichage des timestamps des klines"
echo "  ‚úÖ Affichage de la p√©riode couverte pour chaque timeframe"
echo "  ‚úÖ R√©sum√© global avec statistiques"
echo "  ‚úÖ Fonctionnement sur diff√©rents contrats"
echo "  ‚úÖ Fonctionnement sur diff√©rentes dates"
echo "  ‚úÖ Interface web avec bouton d√©di√©"
echo "  ‚úÖ Performance de la validation"
echo ""
echo "üí° Fonctionnalit√©s de la validation en cascade:"
echo "  - Validation automatique sur tous les timeframes"
echo "  - Affichage des conditions OK/KO pour chaque timeframe"
echo "  - Affichage des IDs des klines utilis√©es"
echo "  - Affichage des timestamps des klines"
echo "  - R√©sum√© du contexte (Close, ATR, RSI, EMA, VWAP)"
echo "  - Statut global bas√© sur tous les timeframes"
echo "  - Taux de r√©ussite global"
echo ""
echo "üåê Interface web: $API_BASE/indicators/test"
