#!/bin/bash

# Script de test pour v√©rifier la correction de la fonction evaluateIndicators
# Usage: ./scripts/test-evaluate-indicators-fix.sh

set -e

# Configuration
API_BASE="http://localhost:8082"
ENDPOINT="/indicators/evaluate"

echo "=========================================="
echo "Test de la correction evaluateIndicators"
echo "=========================================="
echo "URL: $API_BASE$ENDPOINT"
echo ""

# Test 1: V√©rifier que l'endpoint fonctionne avec un symbole valide
echo "Test 1: Test de l'endpoint /indicators/evaluate"
echo "----------------------------------------"
RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"symbol": "BTCUSDT", "timeframe": "1h"}')

echo "R√©ponse compl√®te:"
echo "$RESPONSE" | jq '.'

# V√©rifier le succ√®s
SUCCESS=$(echo "$RESPONSE" | jq -r '.success // false')
if [ "$SUCCESS" = "true" ]; then
    echo "‚úÖ Endpoint /indicators/evaluate fonctionne"
else
    echo "‚ùå Endpoint /indicators/evaluate √©choue"
    echo "Erreur: $(echo "$RESPONSE" | jq -r '.message // "N/A"')"
fi
echo ""

# Test 2: V√©rifier que la page web se charge correctement
echo "Test 2: V√©rification de la page web"
echo "----------------------------------------"
WEB_PAGE=$(curl -s "$API_BASE/indicators/test")

if echo "$WEB_PAGE" | grep -q "√âvaluer les Indicateurs"; then
    echo "‚úÖ Bouton '√âvaluer les Indicateurs' pr√©sent dans l'interface web"
else
    echo "‚ùå Bouton '√âvaluer les Indicateurs' manquant dans l'interface web"
fi

if echo "$WEB_PAGE" | grep -q "evaluateIndicators"; then
    echo "‚úÖ Fonction JavaScript evaluateIndicators pr√©sente"
else
    echo "‚ùå Fonction JavaScript evaluateIndicators manquante"
fi

if echo "$WEB_PAGE" | grep -q "selectedContracts\[0\]"; then
    echo "‚úÖ Fonction utilise selectedContracts[0] (correction appliqu√©e)"
else
    echo "‚ùå Fonction n'utilise pas selectedContracts[0] (correction manquante)"
fi

if echo "$WEB_PAGE" | grep -q "document.getElementById('symbol')"; then
    echo "‚ùå Fonction utilise encore document.getElementById('symbol') (erreur non corrig√©e)"
else
    echo "‚úÖ Fonction n'utilise plus document.getElementById('symbol') (erreur corrig√©e)"
fi
echo ""

# Test 3: V√©rifier que les contrats sont disponibles
echo "Test 3: V√©rification des contrats disponibles"
echo "----------------------------------------"
CONTRACTS_RESPONSE=$(curl -s "$API_BASE/indicators/available-contracts")

CONTRACTS_SUCCESS=$(echo "$CONTRACTS_RESPONSE" | jq -r '.success // false')
if [ "$CONTRACTS_SUCCESS" = "true" ]; then
    CONTRACTS_COUNT=$(echo "$CONTRACTS_RESPONSE" | jq -r '.data | length')
    echo "‚úÖ Contrats disponibles: $CONTRACTS_COUNT"
    
    # V√©rifier que BTCUSDT est dans la liste
    BTCUSDT_PRESENT=$(echo "$CONTRACTS_RESPONSE" | jq -r '.data | contains(["BTCUSDT"])')
    if [ "$BTCUSDT_PRESENT" = "true" ]; then
        echo "‚úÖ BTCUSDT pr√©sent dans la liste des contrats"
    else
        echo "‚ùå BTCUSDT manquant dans la liste des contrats"
    fi
else
    echo "‚ùå Impossible de r√©cup√©rer la liste des contrats"
fi
echo ""

# Test 4: Test avec diff√©rents timeframes
echo "Test 4: Test avec diff√©rents timeframes"
echo "----------------------------------------"
TIMEFRAMES=("1m" "5m" "15m" "1h" "4h")

for tf in "${TIMEFRAMES[@]}"; do
    echo "Test avec timeframe $tf:"
    
    TF_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"symbol\": \"BTCUSDT\", \"timeframe\": \"$tf\"}")
    
    TF_SUCCESS=$(echo "$TF_RESPONSE" | jq -r '.success // false')
    if [ "$TF_SUCCESS" = "true" ]; then
        echo "  ‚úÖ Timeframe $tf: √âvaluation r√©ussie"
    else
        echo "  ‚ùå Timeframe $tf: √âchec de l'√©valuation"
        echo "  Erreur: $(echo "$TF_RESPONSE" | jq -r '.message // "N/A"')"
    fi
done
echo ""

# Test 5: Test avec diff√©rents contrats
echo "Test 5: Test avec diff√©rents contrats"
echo "----------------------------------------"
CONTRACTS=("ETHUSDT" "ADAUSDT" "SOLUSDT")

for contract in "${CONTRACTS[@]}"; do
    echo "Test avec contrat $contract:"
    
    CONTRACT_RESPONSE=$(curl -s -X POST "$API_BASE$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"symbol\": \"$contract\", \"timeframe\": \"1h\"}")
    
    CONTRACT_SUCCESS=$(echo "$CONTRACT_RESPONSE" | jq -r '.success // false')
    if [ "$CONTRACT_SUCCESS" = "true" ]; then
        echo "  ‚úÖ Contrat $contract: √âvaluation r√©ussie"
    else
        echo "  ‚ùå Contrat $contract: √âchec de l'√©valuation"
        echo "  Erreur: $(echo "$CONTRACT_RESPONSE" | jq -r '.message // "N/A"')"
    fi
done
echo ""

# Test 6: V√©rifier la structure de la r√©ponse
echo "Test 6: V√©rification de la structure de la r√©ponse"
echo "----------------------------------------"
if [ "$SUCCESS" = "true" ]; then
    echo "Structure de la r√©ponse:"
    
    # V√©rifier les champs principaux
    HAS_DATA=$(echo "$RESPONSE" | jq -r 'has("data")')
    HAS_CONTEXT=$(echo "$RESPONSE" | jq -r '.data | has("context")')
    HAS_CONDITIONS=$(echo "$RESPONSE" | jq -r '.data | has("conditions")')
    
    if [ "$HAS_DATA" = "true" ]; then
        echo "  ‚úÖ Champ 'data' pr√©sent"
    else
        echo "  ‚ùå Champ 'data' manquant"
    fi
    
    if [ "$HAS_CONTEXT" = "true" ]; then
        echo "  ‚úÖ Champ 'context' pr√©sent"
    else
        echo "  ‚ùå Champ 'context' manquant"
    fi
    
    if [ "$HAS_CONDITIONS" = "true" ]; then
        echo "  ‚úÖ Champ 'conditions' pr√©sent"
    else
        echo "  ‚ùå Champ 'conditions' manquant"
    fi
    
    # Afficher un r√©sum√© des conditions
    CONDITIONS_COUNT=$(echo "$RESPONSE" | jq -r '.data.conditions | length // 0')
    echo "  üìä Nombre de conditions: $CONDITIONS_COUNT"
    
    if [ "$CONDITIONS_COUNT" -gt 0 ]; then
        echo "  üìã Exemples de conditions:"
        echo "$RESPONSE" | jq -r '.data.conditions | keys[0:3] | .[]' | while read condition; do
            echo "    - $condition"
        done
    fi
else
    echo "‚ùå Impossible de v√©rifier la structure (r√©ponse en erreur)"
fi
echo ""

echo "=========================================="
echo "Tests termin√©s"
echo "=========================================="
echo ""
echo "üéØ R√©sum√© des corrections test√©es:"
echo "  ‚úÖ Correction de la fonction evaluateIndicators()"
echo "  ‚úÖ Utilisation de selectedContracts[0] au lieu de document.getElementById('symbol')"
echo "  ‚úÖ Validation de la s√©lection de contrats"
echo "  ‚úÖ Fonctionnement de l'endpoint /indicators/evaluate"
echo "  ‚úÖ Interface web avec bouton corrig√©"
echo ""
echo "üí° Fonctionnalit√©s de la correction:"
echo "  - Utilise le premier contrat s√©lectionn√© pour l'√©valuation"
echo "  - Valide qu'au moins un contrat est s√©lectionn√©"
echo "  - √âvite l'erreur 'Cannot read properties of null'"
echo "  - Maintient la compatibilit√© avec l'interface existante"
echo ""
echo "üåê Interface web: $API_BASE/indicators/test"

