services:

  ##################################
  # FRONTEND (isolé)
  ##################################
  frontend-dev:
    image: node:16-alpine
    container_name: frontend_dev
    working_dir: /app
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8080
    command: sh -c "npm install --legacy-peer-deps && npm start"
    networks:
      - frontend-net

  ##################################
  # BACKEND SYMFONY (isolé)
  ##################################
  php:
    build: ./symfony-app
    container_name: symfony_php
    volumes:
      - ./symfony-app:/var/www/html
    environment:
      - DATABASE_URL=mysql://symfony:symfony@db:3306/symfony_db
    depends_on:
      - db
      - python
    networks:
      - backend-net
      - shared-net

  nginx:
    image: nginx:latest
    container_name: symfony_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./symfony-app:/var/www/html
    depends_on:
      - php
    networks:
      - backend-net
      - shared-net

  db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=symfony_db
      - MYSQL_USER=symfony
      - MYSQL_PASSWORD=symfony
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - backend-net

  python:
    build: ./technical_indicator
    container_name: indicator_api
    volumes:
      - ./python-api:/app
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=symfony_db
      - DB_USER=symfony
      - DB_PASSWORD=symfony
    ports:
      - "8888:8000"
    depends_on:
      - db
    networks:
      - backend-net
      - shared-net

  ##################################
  # TEMPORAL STACK (isolé)
  ##################################
  postgresql:
    image: postgres:13
    container_name: temporal_postgresql
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
    ports:
      - "5434:5432"
    networks:
      - temporal-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.25
    container_name: temporal_server
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - TEMPORAL_CLI_SHOW_STACKS=1
      - ENABLE_HTTP_API=true
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development.yaml
    expose:
      - "8080" # HTTP Gateway pour temporal-ui
    ports:
      - "7233:7233" # gRPC externe
      - "7234:7234"
      - "7235:7235"
      - "7239:7239"
      - "7243:7243"
    volumes:
      - ./temporal/config/dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - temporal-net
      - shared-net
    restart: always
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "workflow", "list"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-ui:
    image: temporalio/ui:2.39.0
    container_name: temporal_ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_UI_PORT=8080
      - TEMPORAL_UI_AUTH_ENABLED=false
      - TEMPORAL_CSRF_COOKIE_INSECURE=true
    ports:
      - "8233:8080"
    networks:
      - temporal-net
      - shared-net
    restart: always

volumes:
  mysql-data:

networks:
  frontend-net:
    driver: bridge
  backend-net:
    driver: bridge
  temporal-net:
    driver: bridge
  shared-net:
    driver: bridge
