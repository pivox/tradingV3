name: tradingv3

x-global-variables: &global-env
  BITMART_API_KEY: "${BITMART_API_KEY}"
  BITMART_SECRET_KEY: "${BITMART_SECRET_KEY}"
  BITMART_BASE_URL: "${BITMART_BASE_URL}"
  BITMART_PRIVATE_API_URL: "${BITMART_PRIVATE_API_URL}"
  BITMART_WS_PRIVATE_URL: "${BITMART_WS_PRIVATE_URL}"
  BITMART_WS_DEVICE: "${BITMART_WS_DEVICE}"
  BITMART_API_MEMO: "${BITMART_API_MEMO}"
  BITMART_PUBLIC_API_URL: "${BITMART_PUBLIC_API_URL}"   # ← AJOUT ICI

services:


  ##################################
  # FRONTEND (isolé)
  ##################################
  frontend-dev:
    image: node:20-alpine
    container_name: frontend_dev
    working_dir: /app
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_POSITIONS_WS_BASE_URL=http://localhost:9000
    command: sh -c "npm install --legacy-peer-deps && npm start"
    networks:
      - frontend-net


  ##################################
  # (Optionnel) API indicateurs techniques - commentée
  ##################################
  # python:
  #   build: ./technical_indicator
  #   container_name: indicator_api
  #   working_dir: /app
  #   command: [ "/app/entrypoint.sh" ]
  #   environment:
  #     - DB_HOST=db
  #     - DB_PORT=3306
  #     - DB_NAME=symfony_db
  #     - DB_USER=symfony
  #     - DB_PASSWORD=symfony
  #     - UVICORN_HOST=0.0.0.0
  #     - UVICORN_PORT=8000
  #     - UVICORN_WORKERS=1
  #     - FASTAPI_RELOAD=1
  #     - WATCHFILES_FORCE_POLLING=1
  #   volumes:
  #     - ./technical_indicator/app:/app/app
  #     - ./technical_indicator/indicators:/app/indicators
  #   ports:
  #     - "8888:8000"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - backend-net
  #     - shared-net
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 10s

  ##################################
  # TEMPORAL STACK (isolé)
  ##################################
  postgresql:
    image: postgres:13
    container_name: temporal_postgresql
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
    ports:
      - "5434:5432"
    networks:
      - temporal-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.25
    container_name: temporal_server
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - TEMPORAL_CLI_SHOW_STACKS=1
      - ENABLE_HTTP_API=true
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development.yaml
    expose:
      - "8080" # HTTP Gateway pour temporal-ui
    ports:
      - "7233:7233"   # gRPC
    volumes:
      - ./temporal/config/dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      temporal-net:
        aliases:
          - temporal
      shared-net:
        aliases:
          - temporal-grpc
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "ADDR=$$(ifconfig eth0 | awk '/inet addr/ {print $$2}' | cut -d: -f2); temporal operator cluster health --address $${ADDR}:7233 >/dev/null 2>&1 || tctl --address $${ADDR}:7233 cluster health >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 120s

  temporal-ui:
    image: temporalio/ui:2.39.0
    container_name: temporal_ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-grpc:7233
      - TEMPORAL_UI_PORT=8080
      - TEMPORAL_UI_AUTH_ENABLED=false
      - TEMPORAL_CSRF_COOKIE_INSECURE=true
    ports:
      - "8233:8080"
    networks:
      - temporal-net
      - shared-net
    restart: always

  ##################################
  # WORKERS (ajoutés depuis docker-compose.workers.yml)
  ##################################

  cron-symfony-mtf-workers:
    build: ./cron_symfony_mtf_workers
    container_name: cron_symfony_mtf_workers
    environment:
      - TEMPORAL_ADDRESS=temporal-grpc:7233
      - TASK_QUEUE_NAME=cron_symfony_mtf_workers
      - MTF_WORKERS_URL=http://trading-app-nginx:80/api/mtf/run
      - MTF_WORKERS_COUNT=5
      - MTF_WORKERS_DRY_RUN=false
    depends_on:
      temporal:
        condition: service_healthy
    networks:
      - temporal-net
      - shared-net

#  grafana:
#    image: grafana/grafana:10.4.0
#    container_name: grafana
#    ports:
#      - "3001:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - grafana-data:/var/lib/grafana
#      - ./monitoring/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
#      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
#      - ./monitoring/grafana-provisioning/alerting:/etc/grafana/provisioning/alerting
#      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
#    depends_on:
#      trading-app-db:
#        condition: service_healthy
#    networks:
#      - shared-net
#  loki:
#    image: grafana/loki:2.9.3
#    container_name: loki
#    command: -config.file=/etc/loki/local-config.yaml
#    volumes:
#      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
#      - loki-data:/loki
#    ports:
#      - "3100:3100"
#    networks:
#      - shared-net
#
#  promtail:
#    image: grafana/promtail:2.9.3
#    container_name: promtail
#    command: -config.file=/etc/promtail/config.yaml
#    volumes:
#      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yaml
#      - ./trading-app/var/log:/var/log/symfony
#    depends_on:
#      - loki
#    networks:
#      - shared-net


  # --- Nouveau: listener des positions Bitmart via console Symfony
#  symfony-positions-listener:
#    build: ./symfony-app
#    container_name: symfony_positions_listener
#    working_dir: /var/www/html
#    volumes:
#      - ./symfony-app:/var/www/html
#    env_file:
#      - ./.env
#    environment:
#      <<: *global-env
#      DATABASE_URL: ${DATABASE_URL:-mysql://symfony:symfony@db:3306/symfony_db}
#    depends_on:
#      db:
#        condition: service_healthy
#    command: >-
#      sh -c "
#      while true; do
#        php bin/console bitmart:listen-positions || true;
#        echo '[positions-listener] process ended, restarting in 5s...';
#        sleep 5;
#      done"
#    restart: always
#    networks:
#      - backend-net
#      - shared-net
#
#  # --- Nouveau: listener des ordres Bitmart via console Symfony
#  symfony-orders-listener:
#    build: ./symfony-app
#    container_name: symfony_orders_listener
#    working_dir: /var/www/html
#    volumes:
#      - ./symfony-app:/var/www/html
#    env_file:
#      - ./.env
#    environment:
#      <<: *global-env
#      DATABASE_URL: ${DATABASE_URL:-mysql://symfony:symfony@db:3306/symfony_db}
#    depends_on:
#      db:
#        condition: service_healthy
#    command: >-
#      sh -c "
#      while true; do
#        php bin/console bitmart:listen-orders || true;
#        echo '[orders-listener] process ended, restarting in 5s...';
#        sleep 5;
#      done"
#    restart: always
#    networks:
#      - backend-net
#      - shared-net

#  ws-worker:
#    build: ./ws-worker
#    image: ws-worker:latest
#    working_dir: /var/www/html
#    volumes:
#      - ./ws-worker:/var/www/html
#    command: ["php", "bin/console", "ws:run"]
#    environment:
#      <<: *global-env
#      DATABASE_URL: ${TRADING_APP_DATABASE_URL:-postgresql://postgres:password@trading-app-db:5432/trading_app?serverVersion=15&charset=utf8}
#      CTRL_ADDR: 0.0.0.0:8088
#      BITMART_API_SECRET: ${BITMART_SECRET_KEY}
#      BITMART_PUBLIC_WS_URI: wss://openapi-ws-v2.bitmart.com/api?protocol=1.1
#      BITMART_PRIVATE_WS_URI: wss://openapi-ws-v2.bitmart.com/user?protocol=1.1
#      TRADING_APP_BASE_URI: ${TRADING_APP_BASE_URI:-http://trading-app-nginx}
#      TRADING_APP_ORDER_SIGNAL_PATH: ${TRADING_APP_ORDER_SIGNAL_PATH:-/api/ws-worker/orders}
#      TRADING_APP_SHARED_SECRET: ${WS_WORKER_SHARED_SECRET:-change-me}
#      TRADING_APP_REQUEST_TIMEOUT: ${TRADING_APP_REQUEST_TIMEOUT:-2.0}
#      TRADING_APP_SIGNAL_MAX_RETRIES: ${TRADING_APP_SIGNAL_MAX_RETRIES:-5}
#      TRADING_APP_SIGNAL_FAILURE_LOG: ${TRADING_APP_SIGNAL_FAILURE_LOG:-/var/log/trading/order-signal-failures.log}
#    depends_on:
#      - trading-app-db
#    networks:
#      - shared-net
#      - trading-app-net
#    deploy:
#      replicas: 5   # ← démarre pour ~100 contrats (5 sockets ~500 canaux)
#    restart: always

  ##################################
  # TRADING-APP (nouvelle application)
  ##################################
  trading-app-php:
    build:
      context: ./trading-app
      dockerfile: Dockerfile.mtf
    container_name: trading_app_php
    working_dir: /var/www/html
    volumes:
      - ./trading-app:/var/www/html
      - ./trading-app/php/conf.d:/usr/local/etc/php/conf.d
    environment:
      <<: *global-env
      DATABASE_URL: ${TRADING_APP_DATABASE_URL:-postgresql://postgres:password@trading-app-db:5432/trading_app?serverVersion=15&charset=utf8}
      LOCK_DSN: postgresql://postgres:password@trading-app-db:5432/trading_app
      LOG_LEVEL_MAIN: info
      DEFAULT_URI: http://localhost:8082
      WS_WORKERS: tradingv3-ws-worker-1:8088,tradingv3-ws-worker-2:8088,tradingv3-ws-worker-3:8088,tradingv3-ws-worker-4:8088,tradingv3-ws-worker-5:8088
      LOG_LEVEL_SIGNALS: info
      LOG_LEVEL_POSITIONS: info
      LOG_LEVEL_INDICATORS: info
      LOG_LEVEL_HIGHCONVICTION: info
      LOG_LEVEL_PIPELINE_EXEC: info
      LOG_LEVEL_GLOBAL_SEVERITY: error
      ASYNC_LOGGING_ENABLED: '1'
      # Symfony env now sourced from project .env (APP_ENV, APP_DEBUG)
      MAILER_DSN: 'smtp://localhost'
      MTF_LOG_LEVEL: debug
      MESSENGER_TRANSPORT_DSN: redis://redis:6379/log-messages
      APP_SECRET: d278711c5ab89bfbda10dd7d29427cf6
      WS_WORKER_SHARED_SECRET: ${WS_WORKER_SHARED_SECRET:-change-me}
      BITMART_PUBLIC_API_URL: ${BITMART_PUBLIC_API_URL}
    depends_on:
      trading-app-db:
        condition: service_healthy
    networks:
      - trading-app-net
      - shared-net
    command: >-
      sh -c "if [ ! -f vendor/autoload.php ]; then \
        echo '[trading-app-php] vendor missing -> composer install'; \
        composer install --no-dev --optimize-autoloader --no-interaction; \
      fi; php-fpm"

  trading-app-nginx:
    image: nginx:latest
    container_name: trading_app_nginx
    ports:
      - "8082:80"
    volumes:
      - ./trading-app/public:/var/www/html/public
      - ./nginx/trading-app.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - trading-app-php
    networks:
      - trading-app-net
      - shared-net

  trading-app-db:
    image: postgres:15
    container_name: trading_app_postgres
    environment:
      - POSTGRES_DB=trading_app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - trading-app-postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - trading-app-net
      - shared-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s


volumes:
#  mysql-data:
  trading-app-postgres-data:

networks:
  frontend-net:
    driver: bridge
    name: tradingv3_frontend-net
  temporal-net:
    driver: bridge
    name: tradingv3_temporal-net
  trading-app-net:
    driver: bridge
    name: tradingv3_trading-app-net
  shared-net:
    driver: bridge
    name: tradingv3_shared-net
