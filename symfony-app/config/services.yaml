# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    indicator_base: '%env(default::INDICATOR_BASE)%'
    indicator_timeout: 20
    indicator_retries: 2
    quantization.tick_size: 0.01
    quantization.step_size: 0.001
    liquidation_guard.min_ratio: 3.0
    liquidation_guard.fallback_max_leverage: 10.0
    bitmart.base_url: '%env(default::BITMART_BASE_URL)%'
    trading.account.default_user: 'system'
    trading.account.exchange: 'bitmart'
    high_conviction.trace_path: '%kernel.project_dir%/var/log/high_conviction_traces.jsonl'
    app.bitmart_callback_base_url: 'http://nginx'
    app.bitmart_callback_path: 'api/callback/bitmart/get-kline'
    app.pipeline_default_limit: 260


    # Path to strategy YAML (also set in packages/scalping.yaml)
    trading.scalping.file: '%kernel.project_dir%/config/packages/trading.scalping.yml'
    opened_locked_sync.dry_run: true
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    React\EventLoop\LoopInterface:
        class: React\EventLoop\Loop
        factory: ['React\EventLoop\Loop', 'get']

    App\Service\Exchange\Bitmart\BitmartFetcher:
        tags: [ 'mon.exchange.fetcher' ]

    App\Service\Config\TradingParameters:
        arguments:
            $configFile: '%trading.scalping.file%'
    App\Service\ExchangeFetcherInterface: '@App\Service\Exchange\Bitmart\BitmartFetcher'
    Symfony\Component\Clock\NativeClock: ~
    Symfony\Component\Clock\ClockInterface: '@Symfony\Component\Clock\NativeClock'
    App\State\BitmartKlineProvider:
        tags: [ 'api_platform.state_provider' ]

    App\Service\Indicator\Trend\Ema: ~
    App\Service\Indicator\Trend\Adx: ~
    App\Service\Indicator\Trend\Ichimoku: ~

    App\Service\Signals\Timeframe\Signal4hService: ~

    clock.test:
        class: Symfony\Component\Clock\MockClock
        public: true

    App\Service\Indicator\AtrCalculator: ~
#    App\Service\Risk\PositionSizer:
#        arguments:
#            $tickSize: '%quantization.tick_size%'
#            $stepSize: '%quantization.step_size%'
#            $fallbackMaxLeverage: '%liquidation_guard.fallback_max_leverage%'
#            $minLiqRatio: '%liquidation_guard.min_ratio%'

    App\Service\Temporal\ApiRateLimiterWorkflowClient:
        arguments:
            $temporalHttpBase: 'http://temporal:8080'
            $namespace: 'default'
            $signalName: 'submit'
    App\Repository\:
        resource: '../src/Repository/'
        autowire: true
        autoconfigure: true
        lazy: true
    App\Repository\RuntimeGuardRepository:
        lazy: false
    App\Service\Trading\InMemoryExchangeClient:
        autowire: true
        autoconfigure: true
        public: true
    App\Service\Risk\PositionSizer:
        autowire: true
        autoconfigure: true
        public: true

    # Alias d’autowiring : injecte le bouchon quand un constructeur demande ExchangeClient
    App\Service\Trading\ExchangeClient: '@App\Service\Trading\InMemoryExchangeClient'
    # App\Service\Signals\SignalScalpingService: ~
    # Expose YAML config as container parameters (optional)

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


    Psr\Log\LoggerInterface $validationLogger:
        factory: ['@monolog.logger.validation', 'get'] # alias auto
    Psr\Log\LoggerInterface $signalsLogger:
        factory: ['@monolog.logger.signals', 'get']
    Psr\Log\LoggerInterface $indicatorsLogger:
        factory: ['@monolog.logger.indicators', 'get']
    Psr\Log\LoggerInterface $pipelineExecLogger:
        factory: ['@monolog.logger.pipeline_exec', 'get']

    App\Service\Signals\Timeframe\Signal1hService:
        arguments:
            $validationLogger: '@monolog.logger.validation'
            $signalsLogger: '@monolog.logger.signals'


    App\Service\Trading\OpenedLockedSyncService:
        arguments:
            $dryRun: '%opened_locked_sync.dry_run%'

    App\Service\Trading\PositionOpener:
        arguments:
            $ordersService: '@App\Service\Bitmart\Private\OrdersService'
            $bitmartPositions: '@App\Service\Bitmart\Private\PositionsService'
            $trailOrders: '@App\Service\Bitmart\Private\TrailOrdersService'
            $contractRepository: '@App\Repository\ContractRepository'

    App\Service\Trading\BitmartAccountGateway: '@App\Service\Trading\BitmartAccountService'

    App\Service\Trading\BitmartAccountService:
        arguments:
            $defaultUserId: '%trading.account.default_user%'
            $exchangeName: '%trading.account.exchange%'

    App\Service\Config\BitmartConfig:
        arguments:
            $apiKey: '%env(BITMART_API_KEY)%'
            $secretKey: '%env(BITMART_SECRET_KEY)%'
            $apiMemo: '%env(BITMART_API_MEMO)%'
    App\Service\Config\BitmartWsConfig:
        parent: App\Service\Config\BitmartConfig
        arguments:
            $wsBaseUrl: '%env(BITMART_WS_PRIVATE_URL)%'
            $device: '%env(BITMART_WS_DEVICE)%'

    App\Logging\CustomLineFormatter:
        class: App\Logging\CustomLineFormatter
        public: false

    App\Bitmart\Http\BitmartHttpClientPublic:
        arguments:
            $bitmartFuturesV2: '@http_client.bitmart_futures_v2'
            $bitmartSystem: '@http_client.bitmart_system'

    App\Bitmart\Http\BitmartRequestSigner:
        arguments:
            $apiSecret: '%env(BITMART_SECRET_KEY)%'
            $apiMemo: '%env(BITMART_API_MEMO)%'

    App\Bitmart\Http\BitmartHttpClientPrivate:
        arguments:
            $bitmartFuturesV2: '@http_client.bitmart_futures_v2_private'
            $signer: '@App\Bitmart\Http\BitmartRequestSigner'
            $apiKey: '%env(BITMART_API_KEY)%'
    App\Service\Indicator\SupportResistanceService:
        public: false
        autowire: true
        autoconfigure: true

    App\Service\Pipeline\SlotService: ~

    App\Service\Pipeline\RefreshTfService:
        arguments:
            $db: '@doctrine.dbal.default_connection'
            $slot: '@App\Service\Pipeline\SlotService'
            $logger: '@monolog.logger.pipeline_exec'
            $dispatcher: '@App\Service\Temporal\TemporalDispatcher' # ton implémentation

    App\Service\Pipeline\IndicatorSignalAdapter:
        arguments:
            $logger: '@logger'

    App\Service\Pipeline\CallbackEvalService:
        arguments:
            $db: '@doctrine.dbal.default_connection'
            $slot: '@App\Service\Pipeline\SlotService'
            $logger: '@monolog.logger.pipeline_exec'
            $indicators: '@App\Service\Pipeline\IndicatorSignalAdapter'
            $tradingParameters: '@App\Service\Config\TradingParameters'

    App\Service\Pipeline\IndicatorServiceInterface: '@App\Service\Pipeline\IndicatorSignalAdapter'
    App\Service\Temporal\Dto\WorkflowRef:
        arguments:
            $id: 'api-rate-limiter-workflow'
            $type: 'ApiRateLimiterClient'
            $taskQueue: 'api_rate_limiter_queue'

    App\Service\Temporal\TemporalDispatcher:
        arguments:
            $workflowRef: '@App\Service\Temporal\Dto\WorkflowRef'
            $baseUrl: '%app.bitmart_callback_base_url%'
            $callbackPath: '%app.bitmart_callback_path%'
            $defaultLimit: '%app.pipeline_default_limit%'
            $logger: '@monolog.logger.pipeline_exec'

    App\Service\Pipeline\MtfStateService:
        arguments:
            $logger: '@monolog.logger.pipeline_exec'

    App\Service\Pipeline\MtfEligibilityFinder:
        arguments:
            $logger: '@monolog.logger.pipeline_exec'

    App\Service\Pipeline\TemporalDispatcherInterface: '@App\Service\Temporal\TemporalDispatcher'
